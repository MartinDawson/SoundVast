{
  "_args": [
    [
      {
        "raw": "normalizr@^3.2.3",
        "scope": null,
        "escapedName": "normalizr",
        "name": "normalizr",
        "rawSpec": "^3.2.3",
        "spec": ">=3.2.3 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast"
    ]
  ],
  "_from": "normalizr@>=3.2.3 <4.0.0",
  "_id": "normalizr@3.2.3",
  "_inCache": true,
  "_location": "/normalizr",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/normalizr-3.2.3.tgz_1495032184234_0.06690242560580373"
  },
  "_npmUser": {
    "name": "paularmstrong",
    "email": "paul@spaceyak.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "normalizr@^3.2.3",
    "scope": null,
    "escapedName": "normalizr",
    "name": "normalizr",
    "rawSpec": "^3.2.3",
    "spec": ">=3.2.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/normalizr/-/normalizr-3.2.3.tgz",
  "_shasum": "88755c64de418b040fa6ad1329b2de5c3250ac49",
  "_shrinkwrap": null,
  "_spec": "normalizr@^3.2.3",
  "_where": "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast",
  "author": {
    "name": "Paul Armstrong"
  },
  "bugs": {
    "url": "https://github.com/paularmstrong/normalizr/issues"
  },
  "contributors": [
    {
      "name": "Dan Abramov"
    }
  ],
  "dependencies": {},
  "description": "Normalizes and denormalizes JSON according to schema for Redux and Flux applications",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-eslint": "^7.1.1",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-es2015-rollup": "^3.0.0",
    "babel-preset-stage-1": "^6.16.0",
    "coveralls": "^2.11.15",
    "eslint": "^3.12.2",
    "flow-bin": "^0.37.1",
    "immutable": "^3.8.1",
    "jest": "19.0.2",
    "mkdirp": "^0.5.1",
    "npm-run-all": "^3.1.2",
    "rimraf": "^2.5.4",
    "rollup": "^0.37.0",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-plugin-filesize": "^1.2.1",
    "rollup-plugin-uglify": "^1.0.1",
    "typescript": "^2.1.4",
    "typescript-definition-tester": "0.0.5"
  },
  "directories": {},
  "dist": {
    "shasum": "88755c64de418b040fa6ad1329b2de5c3250ac49",
    "tarball": "https://registry.npmjs.org/normalizr/-/normalizr-3.2.3.tgz"
  },
  "files": [
    "dist/",
    "index.d.ts",
    "LICENSE",
    "README.md"
  ],
  "gitHead": "f7aa24259aedb0b43d58a1a280a52a871296e0a7",
  "homepage": "https://github.com/paularmstrong/normalizr",
  "keywords": [
    "flux",
    "redux",
    "normalize",
    "denormalize",
    "api",
    "json"
  ],
  "license": "MIT",
  "main": "dist/src/index.js",
  "maintainers": [
    {
      "name": "paularmstrong",
      "email": "paul@spaceyak.com"
    }
  ],
  "name": "normalizr",
  "optionalDependencies": {},
  "readme": "# normalizr [![build status](https://img.shields.io/travis/paularmstrong/normalizr/master.svg?style=flat-square)](https://travis-ci.org/paularmstrong/normalizr) [![Coverage Status](https://img.shields.io/coveralls/paularmstrong/normalizr/master.svg?style=flat-square)](https://coveralls.io/github/paularmstrong/normalizr?branch=master) [![npm version](https://img.shields.io/npm/v/normalizr.svg?style=flat-square)](https://www.npmjs.com/package/normalizr) [![npm downloads](https://img.shields.io/npm/dm/normalizr.svg?style=flat-square)](https://www.npmjs.com/package/normalizr)\n\n## Motivation\n\nMany APIs, public or not, return JSON data that has deeply nested objects. Using data in this kind of structure is often [very difficult](https://groups.google.com/forum/#!topic/reactjs/jbh50-GJxpg) for JavaScript applications, especially those using [Flux](http://facebook.github.io/flux/) or [Redux](http://redux.js.org/).\n\n## Solution\n\nNormalizr is a small, but powerful utility for taking JSON with a schema definition and returning nested entities with their IDs, gathered in dictionaries.\n\n## Documentation\n\n* [Introduction](/docs/introduction.md)\n* [Quick Start](/docs/quickstart.md)\n* [API](/docs/api.md)\n    - [normalize](/docs/api.md#normalizedata-schema)\n    - [denormalize](/docs/api.md#denormalizeinput-schema-entities)\n    - [schema](/docs/api.md#schema)\n\n## Examples\n\n* [Normalizing GitHub Issues](/examples/github)\n* [Relational Data](/examples/relationships)\n* [Interactive Redux](/examples/redux)\n\n## Quick Start\n\nConsider a typical blog post. The API response for a single post might look something like this:\n\n```json\n{\n  \"id\": \"123\",\n  \"author\": {\n    \"id\": \"1\",\n    \"name\": \"Paul\"\n  },\n  \"title\": \"My awesome blog post\",\n  \"comments\": [\n    {\n      \"id\": \"324\",\n      \"commenter\": {\n        \"id\": \"2\",\n        \"name\": \"Nicole\"\n      }\n    }\n  ]\n}\n```\n\nWe have two nested entity types within our `article`: `users` and `comments`. Using various `schema`, we can normalize all three entity types down:\n\n```js\nimport { normalize, schema } from 'normalizr';\n\n// Define a users schema\nconst user = new schema.Entity('users');\n\n// Define your comments schema\nconst comment = new schema.Entity('comments', {\n  commenter: user\n});\n\n// Define your article \nconst article = new schema.Entity('articles', { \n  author: user,\n  comments: [ comment ]\n});\n\nconst normalizedData = normalize(originalData, article);\n```\n\nNow, `normalizedData` will be:\n\n```js\n{\n  result: \"123\",\n  entities: {\n    \"articles\": { \n      \"123\": { \n        id: \"123\",\n        author: \"1\",\n        title: \"My awesome blog post\",\n        comments: [ \"324\" ]\n      }\n    },\n    \"users\": {\n      \"1\": { \"id\": \"1\", \"name\": \"Paul\" },\n      \"2\": { \"id\": \"2\", \"name\": \"Nicole\" }\n    },\n    \"comments\": {\n      \"324\": { id: \"324\", \"commenter\": \"2\" }\n    }\n  }\n}\n```\n\n## Dependencies\n\nNone.\n\n## Credits\n\nNormalizr was originally created by [Dan Abramov](http://github.com/gaearon) and inspired by a conversation with [Jing Chen](https://twitter.com/jingc). Since v3, it was completely rewritten and maintained by [Paul Armstrong](https://twitter.com/paularmstrong). It has also received much help, enthusiasm, and contributions from [community members](https://github.com/paularmstrong/normalizr/graphs/contributors).\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/paularmstrong/normalizr.git",
    "type": "git"
  },
  "scripts": {
    "build": "npm run clean && mkdirp dist && npm run build:node && npm-run-all --parallel build:development build:production",
    "build:development": "NODE_ENV=development rollup -c",
    "build:node": "babel src/*.js -d dist && babel src/schemas/*.js -d dist",
    "build:production": "NODE_ENV=production rollup -c",
    "clean": "rimraf dist",
    "flow": "flow src; test $? -eq 0 -o $? -eq 2",
    "lint": "eslint ./ --fix",
    "prebuild": "npm run clean",
    "prepublish": "npm run build",
    "test": "jest",
    "test:coverage": "npm run test -- --coverage && cat ./coverage/lcov.info | coveralls"
  },
  "typings": "index.d.ts",
  "version": "3.2.3"
}
