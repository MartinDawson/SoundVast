{
  "_args": [
    [
      {
        "raw": "screenfull@^3.0.2",
        "scope": null,
        "escapedName": "screenfull",
        "name": "screenfull",
        "rawSpec": "^3.0.2",
        "spec": ">=3.0.2 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast\\node_modules\\react-jplayer"
    ]
  ],
  "_from": "screenfull@>=3.0.2 <4.0.0",
  "_id": "screenfull@3.3.1",
  "_inCache": true,
  "_location": "/screenfull",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/screenfull-3.3.1.tgz_1499381037865_0.9555380190722644"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "5.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "screenfull@^3.0.2",
    "scope": null,
    "escapedName": "screenfull",
    "name": "screenfull",
    "rawSpec": "^3.0.2",
    "spec": ">=3.0.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-jplayer"
  ],
  "_resolved": "https://registry.npmjs.org/screenfull/-/screenfull-3.3.1.tgz",
  "_shasum": "5eea886b412043af89e2e5cc4433f894d0ebb90b",
  "_shrinkwrap": null,
  "_spec": "screenfull@^3.0.2",
  "_where": "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast\\node_modules\\react-jplayer",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/screenfull.js/issues"
  },
  "dependencies": {},
  "description": "Simple wrapper for cross-browser usage of the JavaScript Fullscreen API, which lets you bring the page or any element into fullscreen.",
  "devDependencies": {
    "grunt": "^1.0.1",
    "grunt-contrib-concat": "^1.0.0",
    "grunt-contrib-uglify": "^2.0.0",
    "load-grunt-tasks": "^3.3.0",
    "xo": "^0.16.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-znBz3YSjnxiCKdgqcEmCv5YY5PD9zEyhHVFRiCnJ+uk6Qb/DZuaHPsxLBcanGR2o7laa9hByXbyAX85PO7tmxg==",
    "shasum": "5eea886b412043af89e2e5cc4433f894d0ebb90b",
    "tarball": "https://registry.npmjs.org/screenfull/-/screenfull-3.3.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "dist/screenfull.js"
  ],
  "gitHead": "1b989ea0ff73adfda1e3cddd61a6e47bacec2186",
  "homepage": "https://github.com/sindresorhus/screenfull.js#readme",
  "keywords": [
    "browser",
    "fullscreen"
  ],
  "license": "MIT",
  "main": "dist/screenfull.js",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "screenfull",
  "optionalDependencies": {},
  "readme": "# screenfull.js\n\n> Simple wrapper for cross-browser usage of the JavaScript [Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode), which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have to.\n\n---\n\n<p align=\"center\"><b>ðŸ”¥ Want to strengthen your core JavaScript skills and master ES6?</b><br>I would personally recommend this awesome <a href=\"https://ES6.io/friend/AWESOME\">ES6 course</a> by Wes Bos.</p>\n\n---\n\n### [Demo](https://sindresorhus.com/screenfull.js)\n\n### [Check out my other projects](https://github.com/sindresorhus?tab=repositories)\n\n\n## Install\n\nOnly 0.7 kB gzipped.\n\nDownload the [production version][min] or the [development version][max].\n\n[min]: https://github.com/sindresorhus/screenfull.js/raw/gh-pages/dist/screenfull.min.js\n[max]: https://github.com/sindresorhus/screenfull.js/raw/gh-pages/dist/screenfull.js\n\n```\n$ npm install --save screenfull\n```\n\nAlso available on [cdnjs](https://cdnjs.com/libraries/screenfull.js).\n\n\n## Why?\n\n### Screenfull\n\n```js\nif (screenfull.enabled) {\n\tscreenfull.request();\n}\n```\n\n### Vanilla JavaScript\n\n```js\ndocument.fullscreenEnabled = document.fullscreenEnabled || document.mozFullScreenEnabled || document.documentElement.webkitRequestFullScreen;\n\nfunction requestFullscreen(element) {\n\tif (element.requestFullscreen) {\n\t\telement.requestFullscreen();\n\t} else if (element.mozRequestFullScreen) {\n\t\telement.mozRequestFullScreen();\n\t} else if (element.webkitRequestFullScreen) {\n\t\telement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n\t}\n}\n\nif (document.fullscreenEnabled) {\n\trequestFullscreen(document.documentElement);\n}\n\n// Actually it's more if you want it to work in Safari, but let's not go there...\n```\n\n\n## Support\n\n[Supported browsers](http://caniuse.com/fullscreen)\n\nSafari doesn't support use of the keyboard in fullscreen.\n\n\n## Documentation\n\n\n### Examples\n\n#### Fullscreen the page\n\n```js\ndocument.getElementById('button').addEventListener('click', () => {\n\tif (screenfull.enabled) {\n\t\tscreenfull.request();\n\t} else {\n\t\t// Ignore or do something else\n\t}\n});\n```\n\n#### Fullscreen an element\n\n```js\nconst el = document.getElementById('target');\n\ndocument.getElementById('button').addEventListener('click', () => {\n\tif (screenfull.enabled) {\n\t\tscreenfull.request(el);\n\t}\n});\n```\n\n#### Fullscreen an element with jQuery\n\n```js\nconst target = $('#target')[0]; // Get DOM element from jQuery collection\n\n$('#button').on('click', () => {\n\tif (screenfull.enabled) {\n\t\tscreenfull.request(target);\n\t}\n});\n```\n\n#### Toggle fullscreen on a image with jQuery\n\n```js\n$('img').on('click', event => {\n\tif (screenfull.enabled) {\n\t\tscreenfull.toggle(event.target);\n\t}\n});\n```\n\n#### Detect fullscreen change\n\n```js\nif (screenfull.enabled) {\n\tscreenfull.on('change', () => {\n\t\tconsole.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\n\t});\n}\n```\n\nRemove listeners with:\n\n```js\nscreenfull.off('change', callback);\n```\n\n#### Detect fullscreen error\n\n```js\nif (screenfull.enabled) {\n\tscreenfull.on('error', event => {\n\t\tconsole.error('Failed to enable fullscreen', event);\n\t});\n}\n```\n\nSee the [demo](https://sindresorhus.com/screenfull.js) for more examples, and view the source.\n\n#### Fullscreen an element with Angular.js\n\nYou can use the [Angular.js binding](https://github.com/hrajchert/angular-screenfull) to do something like:\n\n```html\n<div ngsf-fullscreen>\n\t<p>This is a fullscreen element</p>\n\t<button ngsf-toggle-fullscreen>Toggle fullscreen</button>\n</div>\n```\n\n#### Fullscreen the page with Angular 2\n\n```typescript\nimport {Directive, HostListener} from '@angular/core';\nimport * as screenfull from 'screenfull';\n\n@Directive({\n\tselector: '[toggleFullscreen]'\n})\nexport class ToggleFullscreenDirective {\n\t@HostListener('click') onClick() {\n\t\tif (screenfull.enabled) {\n\t\t\tscreenfull.toggle();\n\t\t}\n\t}\n}\n```\n\n```html\n<button toggleFullscreen>Toggle fullscreen<button>\n```\n\n### Methods\n\n#### .request()\n\nMake an element fullscreen.\n\nAccepts a DOM element. Default is `<html>`. If called with another element than the currently active, it will switch to that if it's a decendant.\n\nIf your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\nKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\n#### .exit()\n\nBrings you out of fullscreen.\n\n#### .toggle()\n\nRequests fullscreen if not active, otherwise exits.\n\n#### .on(event, function)\n\nEvents: `change` `error`\n\nAdd a listener for when the browser switches in and out of fullscreen or when there is an error.\n\n#### .off(event, function)\n\nRemove a previously registered event listener.\n\n#### .onchange(function)\n\nAlias for `.on('change', function)`\n\n#### .onerror(function)\n\nAlias for `.on('error', function)`\n\n### Properties\n\n#### .isFullscreen\n\nReturns a boolean whether fullscreen is active.\n\n#### .element\n\nReturns the element currently in fullscreen, otherwise `null`.\n\n#### .enabled\n\nReturns a boolean whether you are allowed to enter fullscreen. If your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n#### .raw\n\nExposes the raw properties (prefixed if needed) used internally: `requestFullscreen`, `exitFullscreen`, `fullscreenElement`, `fullscreenEnabled`, `fullscreenchange`, `fullscreenerror`\n\n\n## FAQ\n\n### How can I navigate to a new page when fullscreen?\n\nThat's not supported by browsers for security reasons. There is, however, a dirty workaround. Create a seamless iframe that fills the screen and navigate to the page in that instead.\n\n```js\n$('#new-page-btn').click(() => {\n\tconst iframe = document.createElement('iframe')\n\n\tiframe.setAttribute('id', 'external-iframe');\n\tiframe.setAttribute('src', 'http://new-page-website.com');\n\tiframe.setAttribute('frameborder', 'no');\n\tiframe.style.position = 'absolute';\n\tiframe.style.top = '0';\n\tiframe.style.right = '0';\n\tiframe.style.bottom = '0';\n\tiframe.style.left = '0';\n\tiframe.style.width = '100%';\n\tiframe.style.height = '100%';\n\n\t$(document.body).prepend(iframe);\n\tdocument.body.style.overflow = 'hidden';\n});\n```\n\n\n## Resources\n\n- [Using the Fullscreen API in web browsers](http://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/)\n- [MDN - Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode)\n- [W3C Fullscreen spec](http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html)\n- [Building an amazing fullscreen mobile experience](http://www.html5rocks.com/en/mobile/fullscreen/)\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/screenfull.js.git"
  },
  "scripts": {
    "test": "xo"
  },
  "version": "3.3.1",
  "xo": {
    "envs": [
      "node",
      "browser"
    ]
  }
}
