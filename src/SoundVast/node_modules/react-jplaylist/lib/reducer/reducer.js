'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactJplayerUtils = require('react-jplayer-utils');

var _lodash = require('lodash.maxby');

var _lodash2 = _interopRequireDefault(_lodash);

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _constants = require('../util/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var add = function add(jPlaylist, _ref) {
  var media = _ref.media,
      playNow = _ref.playNow;

  var highestMediaShufflePosition = (0, _lodash2.default)(jPlaylist.playlist, 'shufflePosition');
  var newMedia = _extends({}, media, {
    id: _shortid2.default.generate(),
    shufflePosition: highestMediaShufflePosition !== undefined ? highestMediaShufflePosition.shufflePosition + 1 : 0
  });
  var playlist = [].concat(_toConsumableArray(jPlaylist.playlist), [newMedia]);
  var current = void 0;

  if (playNow) {
    current = playlist.length - 1;
  } else if (playlist.length === 1) {
    current = 0;
  }

  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    playlist: playlist,
    playNow: playNow,
    current: current
  });
};

var remove = function remove(jPlaylist, _ref2) {
  var index = _ref2.index;

  var playlist = [].concat(_toConsumableArray(jPlaylist.playlist));
  var current = jPlaylist.current;
  var shuffled = jPlaylist.shuffled;

  playlist.splice(index, 1);

  if (playlist.length) {
    if (index === jPlaylist.current) {
      // To cope when last element being selected when it was removed
      current = index < playlist.length ? jPlaylist.current : playlist.length - 1;
    } else if (index < jPlaylist.current) {
      current -= 1;
    }
  } else {
    shuffled = false;
  }

  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    playlist: playlist,
    current: current,
    shuffled: shuffled
  });
};

var clear = function clear(jPlaylist) {
  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    playlist: []
  });
};

// Negative index relates to the end of the array
var select = function select(jPlaylist, _ref3) {
  var index = _ref3.index;
  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    current: index < 0 ? jPlaylist.original.length + index : index
  });
};

// Negative index relates to the end of the array
var play = function play(jPlaylist, _ref4) {
  var _ref4$index = _ref4.index,
      index = _ref4$index === undefined ? jPlaylist.current : _ref4$index;
  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    current: index < 0 ? jPlaylist.original.length + index : index,
    playNow: true
  });
};

var shuffle = function shuffle(jPlaylist, _ref5) {
  var _ref5$shuffled = _ref5.shuffled,
      shuffled = _ref5$shuffled === undefined ? !jPlaylist.shuffled : _ref5$shuffled,
      playNow = _ref5.playNow;

  var playlist = void 0;

  if (shuffled) {
    playlist = [].concat(_toConsumableArray(jPlaylist.playlist)).sort(function () {
      return 0.5 - Math.random();
    });
  } else {
    playlist = [].concat(_toConsumableArray(jPlaylist.playlist)).sort(function (a, b) {
      return a.shufflePosition - b.shufflePosition;
    });
  }

  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    playlist: playlist,
    shuffled: shuffled,
    playNow: playNow
  });
};

var next = function next(jPlaylist) {
  var current = jPlaylist.loop === 'loop-playlist' ? 0 : jPlaylist.current;
  var isWithinPlaylist = jPlaylist.current + 1 < jPlaylist.playlist.length;
  var playNow = true;

  if (!isWithinPlaylist && jPlaylist.loop === 'off') {
    playNow = false;
  }

  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    current: isWithinPlaylist ? jPlaylist.current + 1 : current,
    playNow: playNow
  });
};

var previous = function previous(jPlaylist) {
  var current = jPlaylist.loopOnPrevious ? jPlaylist.playlist.length - 1 : jPlaylist.current;

  if (jPlaylist.current - 1 >= 0) {
    current = jPlaylist.current - 1;
  }

  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    current: current,
    playNow: true
  });
};

var setPlaylist = function setPlaylist(jPlaylist, _ref6) {
  var playlist = _ref6.playlist;
  return (0, _reactJplayerUtils.updateObject)(jPlaylist, {
    current: 0,
    shuffled: false,
    playlist: playlist.map(function (media, index) {
      return _extends({}, media, {
        id: _shortid2.default.generate(),
        shufflePosition: index
      });
    })
  });
};

var updatePlaylist = function updatePlaylist(jPlaylist, action) {
  switch (action.type) {
    case _constants.actionNames.SET_OPTION:
      return (0, _reactJplayerUtils.updateObject)(jPlaylist, _defineProperty({}, action.key, action.value));
    case _constants.actionNames.SET_PLAYLIST:
      return setPlaylist(jPlaylist, action);
    case _constants.actionNames.ADD:
      return add(jPlaylist, action);
    case _constants.actionNames.REMOVE:
      return remove(jPlaylist, action);
    case _constants.actionNames.CLEAR:
      return clear(jPlaylist, action);
    case _constants.actionNames.SELECT:
      return select(jPlaylist, action);
    case _constants.actionNames.PLAY:
      return play(jPlaylist, action);
    case _constants.actionNames.SHUFFLE:
      return shuffle(jPlaylist, action);
    case _constants.actionNames.NEXT:
      return next(jPlaylist, action);
    case _constants.actionNames.PREVIOUS:
      return previous(jPlaylist, action);
    default:
      return null;
  }
};

var jPlaylistReducer = function jPlaylistReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];

  var jPlaylist = updatePlaylist(state[action.id], action);

  if (jPlaylist !== null) {
    return (0, _reactJplayerUtils.updateObject)(state, _defineProperty({}, action.id, jPlaylist));
  }
  return state;
};

exports.default = jPlaylistReducer;