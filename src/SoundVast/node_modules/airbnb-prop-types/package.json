{
  "_args": [
    [
      {
        "raw": "airbnb-prop-types@^2.7.0",
        "scope": null,
        "escapedName": "airbnb-prop-types",
        "name": "airbnb-prop-types",
        "rawSpec": "^2.7.0",
        "spec": ">=2.7.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast"
    ]
  ],
  "_from": "airbnb-prop-types@>=2.7.0 <3.0.0",
  "_id": "airbnb-prop-types@2.7.1",
  "_inCache": true,
  "_location": "/airbnb-prop-types",
  "_nodeVersion": "8.1.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/airbnb-prop-types-2.7.1.tgz_1499986969374_0.7438142425380647"
  },
  "_npmUser": {
    "name": "ljharb",
    "email": "ljharb@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "airbnb-prop-types@^2.7.0",
    "scope": null,
    "escapedName": "airbnb-prop-types",
    "name": "airbnb-prop-types",
    "rawSpec": "^2.7.0",
    "spec": ">=2.7.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/airbnb-prop-types/-/airbnb-prop-types-2.7.1.tgz",
  "_shasum": "1431e40a02449d968f9ac03b2f35794018290408",
  "_shrinkwrap": null,
  "_spec": "airbnb-prop-types@^2.7.0",
  "_where": "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast",
  "author": {
    "name": "Jordan Harband",
    "email": "ljharb@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/airbnb/prop-types/issues"
  },
  "dependencies": {
    "array.prototype.find": "^2.0.4",
    "function.prototype.name": "^1.0.1",
    "has": "^1.0.1",
    "is-regex": "^1.0.4",
    "object.assign": "^4.0.4",
    "object.entries": "^1.0.4",
    "prop-types": "^15.5.10",
    "prop-types-exact": "^1.1.1"
  },
  "description": "Custom React PropType validators that we use at Airbnb.",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-plugin-istanbul": "^4.1.4",
    "babel-plugin-transform-replace-object-assign": "^0.2.1",
    "babel-preset-airbnb": "^2.4.0",
    "babel-register": "^6.24.1",
    "chai": "^4.1.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.0.2",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^5.1.1",
    "eslint-plugin-react": "^7.1.0",
    "mocha": "^3.4.2",
    "nyc": "^10.3.2",
    "object.values": "^1.0.4",
    "react": "^16.0.0-alpha.12",
    "reflect.ownkeys": "^0.2.0",
    "rimraf": "^2.6.1",
    "safe-publish-latest": "^1.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0j7Srn/2brxy1hsyQeE/7lShDnH5VHvMqbhKg4qO+9cBM3vuHongKLk+5xHSLNhdKddd0wj693PgczkyzHazJA==",
    "shasum": "1431e40a02449d968f9ac03b2f35794018290408",
    "tarball": "https://registry.npmjs.org/airbnb-prop-types/-/airbnb-prop-types-2.7.1.tgz"
  },
  "gitHead": "76e4e9559c0bbafefa6bf8b7628456ecabfda566",
  "greenkeeper": {
    "//": "nyc is ignored because it requires node 4+, and we support older than that",
    "ignore": [
      "nyc"
    ]
  },
  "homepage": "https://github.com/airbnb/prop-types#readme",
  "keywords": [
    "react",
    "propTypes",
    "airbnb",
    "prop",
    "types",
    "validator",
    "validation"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "airbnb",
      "email": "jordan.harband+npm@airbnb.com"
    },
    {
      "name": "ljharb",
      "email": "ljharb@gmail.com"
    }
  ],
  "name": "airbnb-prop-types",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14 || ^15.0.0 || ^16.0.0-alpha"
  },
  "readme": "# prop-types <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\n[![Build Status][travis-svg]][travis-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\nCustom React PropType validators that we use at Airbnb. Use of [airbnb-js-shims](https://npmjs.com/package/airbnb-js-shims) or the equivalent is recommended.\n\n - `and`: ensure that all provided propType validators pass\n - `between`: provide an object with an `gt` or `gte` number, and an `lt` or `lte` number (only one item allowed from each pairs; one or both pairs may be provided), and the resulting propType validator will ensure the prop value is a number within the given range. Alternatively, you can provide a function that takes the `props` object and returns a number for each of the `gt`/`gte`/`lt`/`lte` values.\n - `childrenHavePropXorChildren`: ensure that either all children have the indicated prop, all children have children, or all children have neither.\n - `childrenOf`: restrict the children prop to only allow children that pass the given propType validator.\n - `childrenOfType`: restrict the children prop to only allow children of the given element types - takes a Component, an HTML tag name, or `\"*\"` to match everything.\n - `childrenSequenceOf`: restrict the children prop to be a sequenceOf the given \"specifiers\" (see `sequenceOf`)\n - `componentWithName`: restrict the prop to only allow a component with a certain name/displayName. Accepts a string, or a regular expression.\n - `elementType`: require that the prop be a specific type of React element - takes a Component, an HTML tag name, or `\"*\"` to match everything.\n - `explicitNull`: only allow `null` or `undefined`/omission - and only `null` when required.\n - `forbidExtraProps`: pass your entire `propTypes` object into this function, and any nonspecified prop will error.\n - `integer`: require the prop be an integer.\n - `keysOf`: pass in a proptype, and require all the keys of a prop to have that type\n - `mutuallyExclusiveProps`: provide a propType, and a list of props, and only one prop out of the list will be permitted, validated by the given propType.\n - `mutuallyExclusiveTrueProps`: provide a list of props, and all must be booleans, and only one is allowed to be true.\n - `nChildren`: require a specific amount of children.\n - `nonNegativeInteger`: require that the prop be a number, that is 0, or a finite positive integer.\n - `nonNegativeNumber`: require that the prop be a number, that is 0, or a finite positive number.\n - `numericString`: require the prop be a string that is conceptually numeric.\n - `object`: same as `PropTypes.object`, but can be called outside of React's propType flow.\n - `or`: recursively allows only the provided propTypes, or arrays of those propTypes.\n - `range`: provide a min, and a max, and the prop must be a number in the range `[min, max)`\n - `restrictedProp`: this prop is not permitted to be anything but `null` or `undefined`.\n - `sequenceOf`: takes 1 or more \"specifiers\": an object with a \"validator\" function (a propType validator), a \"min\" nonNegativeInteger, and a \"max\" nonNegativeInteger. If both \"min\" and \"max\" may be omitted, they default to 1; if only \"max\" is omitted, it defaults to Infinity; if only \"min\" is omitted, it defaults to 1.\n - `shape`: takes a shape, and allows it to be enforced on any non-null/undefined value.\n - `uniqueArray`: this prop must be an array, and all values must be unique (determined by `Object.is`). Like `PropTypes.array`, but with uniqueness.\n - `uniqueArrayOf`: `uniqueArray`, with a type validator applied. Like `PropTypes.arrayOf`, but with uniqueness.\n - `valuesOf`: a non-object requiring `PropTypes.objectOf`. Takes a propType validator, and applies it to every own value on the propValue.\n - `withShape`: takes a PropType and a shape, and allows it to be enforced on any non-null/undefined value.\n\n## Production\nSince `PropTypes` are typically not included in production builds of React, this libraryâ€™s functionality serves no useful purpose. As such, when the `NODE_ENV` environment variable is `\"production\"`, instead of exporting the implementations of all these prop types, we export mock functions - in other words, something that ensures that no exceptions are thrown, but does no validation. When environment variables are inlined (via a browserify transform or webpack plugin), then tools like webpack or uglify are able to determine that only the mocks will be imported - and can avoid including the entire implementations in the final bundle that is sent to the browser. This allows for a much smaller ultimate file size, and faster in-browser performance, without sacrificing the benefits of `PropTypes` themselves.\n\n## Tests\nSimply clone the repo, `npm install`, and run `npm test`\n\n[package-url]: https://npmjs.org/package/airbnb-prop-types\n[npm-version-svg]: http://versionbadg.es/airbnb/airbnb-prop-types.svg\n[travis-svg]: https://travis-ci.org/airbnb/airbnb-prop-types.svg\n[travis-url]: https://travis-ci.org/airbnb/airbnb-prop-types\n[deps-svg]: https://david-dm.org/airbnb/airbnb-prop-types.svg\n[deps-url]: https://david-dm.org/airbnb/airbnb-prop-types\n[dev-deps-svg]: https://david-dm.org/airbnb/airbnb-prop-types/dev-status.svg\n[dev-deps-url]: https://david-dm.org/airbnb/airbnb-prop-types#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/airbnb-prop-types.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/airbnb-prop-types.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/airbnb-prop-types.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=airbnb-prop-types\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/airbnb/prop-types.git"
  },
  "scripts": {
    "build": "babel src --out-dir build --source-maps",
    "build:index": "babel index.js --out-file index.js --no-babelrc --source-maps",
    "clean": "rimraf build",
    "cover:clean": "rimraf coverage",
    "cover:run": "nyc --show-process-tree npm run --silent mocha test -- --reporter=dot",
    "coverage": "npm run --quiet cover:clean && npm run --silent cover:run",
    "lint": "eslint --ext js,jsx src test",
    "mocha": "mocha --recursive test/helpers/_failTestsOnErrors",
    "postbuild": "npm run build:index",
    "postbuild:index": "mv .index.js index.js",
    "prebuild": "npm run clean",
    "prebuild:index": "cp index.js .index.js",
    "precoverage": "NODE_ENV=test npm run build",
    "prepublish": "npm run build && safe-publish-latest",
    "pretest": "npm run lint",
    "react:14": "npm run react:clean && npm i --no-save react@0.14 react-dom@0.14 react-addons-test-utils@0.14",
    "react:15": "npm run react:clean && npm i --no-save react@15 react-dom@15 react-addons-test-utils@15",
    "react:16": "npm run react:clean && npm i --no-save react@16.0.0-alpha.12 react-dom@16.0.0-alpha.12 react-addons-test-utils@16.0.0-alpha.3",
    "react:clean": "rimraf node_modules/react node_modules/react-dom node_modules/react-addons-test-utils",
    "test": "npm run travis",
    "test:all": "npm run test:only && npm run react:14 && npm run test:only && npm run react:15 && npm run test:only",
    "test:only": "npm run mocha test",
    "travis": "npm run build && npm run test:only"
  },
  "version": "2.7.1"
}
