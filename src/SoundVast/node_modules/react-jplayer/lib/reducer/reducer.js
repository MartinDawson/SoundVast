'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _reactJplayerUtils = require('react-jplayer-utils');

var _constants = require('../util/constants');

var _urlNotSetError = require('../util/errorHandlers/urlNotSetError');

var _urlNotSetError2 = _interopRequireDefault(_urlNotSetError);

var _noFormatSupportedError = require('../util/errorHandlers/noFormatSupportedError');

var _noFormatSupportedError2 = _interopRequireDefault(_noFormatSupportedError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var updateFormats = function updateFormats(jPlayer, media) {
  var newMediaSettings = _extends({}, jPlayer.mediaSettings);
  var newFormats = [];

  Object.keys(media.sources).forEach(function (supplied) {
    var canPlayType = void 0;

    try {
      // Some legacy browsers don't have canPlayType property
      canPlayType = document.createElement(_constants.formats[supplied].MEDIA).canPlayType(_constants.formats[supplied].CODEC);
    } catch (error) {
      canPlayType = '';
    }

    newFormats.push({
      supplied: supplied,
      supported: canPlayType
    });
  });

  newMediaSettings.formats = newFormats;

  return (0, _reactJplayerUtils.updateObject)(jPlayer, {
    mediaSettings: newMediaSettings
  });
};

var clearMedia = function clearMedia(jPlayer) {
  return (0, _reactJplayerUtils.updateObject)(jPlayer, _extends({}, _constants.defaultStatus, {
    media: _constants.defaultOptions.media
  }));
};

var setMedia = function setMedia(jPlayer, _ref) {
  var _ref$media = _ref.media,
      media = _ref$media === undefined ? { sources: [] } : _ref$media;

  var newJPlayer = _extends({}, clearMedia(jPlayer), {
    mediaSettings: _constants.defaultStatus.mediaSettings
  });

  newJPlayer = updateFormats(newJPlayer, media);

  newJPlayer.mediaSettings.formats.forEach(function (format) {
    if (format.supported && !newJPlayer.mediaSettings.foundSupported) {
      newJPlayer.mediaSettings.video = _constants.formats[format.supplied].MEDIA === 'video';
      newJPlayer.src = media.sources[format.supplied];
      newJPlayer.paused = true;
      newJPlayer.mediaSettings.foundSupported = true;
    }
  });

  if (!newJPlayer.mediaSettings.foundSupported) {
    newJPlayer.error = (0, _noFormatSupportedError2.default)('{ media.sources: \'' + Object.keys(media.sources).join(', ') + '\' }');
  }
  newJPlayer.media = (0, _reactJplayerUtils.updateObject)(_constants.defaultOptions.media, _extends({}, media, {
    id: _shortid2.default.generate()
  }));

  return newJPlayer;
};

var play = function play(jPlayer, _ref2) {
  var time = _ref2.time;

  if (jPlayer.src) {
    return (0, _reactJplayerUtils.updateObject)(jPlayer, {
      paused: false,
      newTime: !isNaN(time) ? time : jPlayer.newTime
    });
  }
  return (0, _reactJplayerUtils.updateObject)(jPlayer, {
    error: (0, _urlNotSetError2.default)(play.name)
  });
};

var pause = function pause(jPlayer, _ref3) {
  var time = _ref3.time;

  if (jPlayer.src) {
    return (0, _reactJplayerUtils.updateObject)(jPlayer, {
      paused: true,
      newTime: !isNaN(time) ? time : jPlayer.newTime
    });
  }
  return (0, _reactJplayerUtils.updateObject)(jPlayer, {
    error: (0, _urlNotSetError2.default)(pause.name)
  });
};

var setPlayHead = function setPlayHead(jPlayer, _ref4) {
  var percent = _ref4.percent;

  var limitedPercent = (0, _reactJplayerUtils.limitValue)(percent, 0, 100);

  if (jPlayer.src) {
    return (0, _reactJplayerUtils.updateObject)(jPlayer, {
      playHeadPercent: limitedPercent
    });
  }
  return (0, _reactJplayerUtils.updateObject)(jPlayer, {
    error: (0, _urlNotSetError2.default)(setPlayHead.name)
  });
};

var setVolume = function setVolume(jPlayer, _ref5) {
  var volume = _ref5.volume;
  return (0, _reactJplayerUtils.updateObject)(jPlayer, {
    volume: (0, _reactJplayerUtils.limitValue)(volume, 0, 1),
    muted: volume <= 0
  });
};

var setMute = function setMute(jPlayer, _ref6) {
  var mute = _ref6.mute;
  return (0, _reactJplayerUtils.updateObject)(jPlayer, {
    muted: mute
  });
};

var focus = function focus(jPlayer, _ref7) {
  var id = _ref7.id;

  var newJPlayer = _extends({}, jPlayer);
  var firstKeyEnabledPlayer = Object.keys(newJPlayer).filter(function (key) {
    return newJPlayer[key].keyEnabled;
  }).shift();

  if (newJPlayer[id].keyEnabled) {
    Object.keys(newJPlayer).forEach(function (key) {
      if (key === id) {
        newJPlayer[key] = (0, _reactJplayerUtils.updateObject)(newJPlayer[key], { focused: true });
      } else {
        newJPlayer[key] = (0, _reactJplayerUtils.updateObject)(newJPlayer[key], { focused: false });
      }
    });
  } else if (newJPlayer[firstKeyEnabledPlayer] !== undefined) {
    var focusedPlayer = (0, _reactJplayerUtils.updateObject)(newJPlayer[firstKeyEnabledPlayer], { focused: true });
    return (0, _reactJplayerUtils.updateObject)(newJPlayer, _defineProperty({}, firstKeyEnabledPlayer, focusedPlayer));
  }
  return newJPlayer;
};

var updatePlayer = function updatePlayer(jPlayer, action) {
  switch (action.type) {
    case _constants.actionNames.SET_OPTION:
      switch (action.key) {
        case 'media':
          {
            var media = action.value;
            if (Object.keys(media).some(function (v) {
              return v;
            })) {
              return setMedia(jPlayer, { media: media });
            }
            return clearMedia(jPlayer);
          }
        case 'playHeadPercent':
          return setPlayHead(jPlayer, { percent: action.value });
        case 'volume':
          return setVolume(jPlayer, { volume: action.value });
        case 'muted':
          return setMute(jPlayer, { mute: action.value });
        default:
          return (0, _reactJplayerUtils.updateObject)(jPlayer, _defineProperty({}, action.key, action.value));
      }
    case _constants.actionNames.SET_MEDIA:
      return setMedia(jPlayer, action);
    case _constants.actionNames.CLEAR_MEDIA:
      return clearMedia(jPlayer);
    case _constants.actionNames.PLAY:
      return play(jPlayer, action);
    case _constants.actionNames.PAUSE:
      return pause(jPlayer, action);
    case _constants.actionNames.PLAY_HEAD:
      return setPlayHead(jPlayer, action);
    case _constants.actionNames.VOLUME:
      return setVolume(jPlayer, action);
    case _constants.actionNames.MUTE:
      return setMute(jPlayer, action);
    default:
      return null;
  }
};

var jPlayerReducer = function jPlayerReducer(state, action) {
  var newState = _extends({}, state);
  var jPlayer = updatePlayer(newState[action.id], action);

  if (jPlayer !== null) {
    newState = (0, _reactJplayerUtils.updateObject)(newState, _defineProperty({}, action.id, jPlayer));

    return jPlayerReducer(newState, {
      type: _constants.actionNames.FOCUS,
      id: action.id
    });
  }

  if (action.type === _constants.actionNames.FOCUS) {
    return (0, _reactJplayerUtils.updateObject)(newState, focus(newState, action));
  }
  return newState;
};

exports.default = jPlayerReducer;