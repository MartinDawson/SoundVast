'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.focusData = exports.muteData = exports.volumeData = exports.pauseData = exports.playHeadData = exports.playData = exports.setMediaData = exports.clearMediaData = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constants = require('../../util/constants');

var jPlayerOneId = 'jPlayer-1';
var jPlayerTwoId = 'jPlayer-2';

var clearMediaData = exports.clearMediaData = [{
  state: {
    media: {
      sources: {
        mp3: 'test.mp3',
        title: 'test',
        artist: 'test-artist'
      }
    }
  },
  action: {
    type: _constants.actionNames.CLEAR_MEDIA,
    id: jPlayerOneId
  },
  expected: _extends({}, _constants.defaultStatus, {
    media: _constants.defaultOptions.media
  })
}];

var setMediaData = exports.setMediaData = [{
  action: {
    type: _constants.actionNames.SET_MEDIA,
    id: jPlayerOneId,
    media: {
      sources: {
        mp3: 'test.mp3',
        oga: 'test.ogg'
      }
    }
  },
  expected: {
    mediaSettings: {
      video: false,
      foundSupported: true,
      formats: [{
        supplied: 'mp3',
        supported: 'probably'
      }, {
        supplied: 'oga',
        supported: 'probably'
      }]
    },
    src: 'test.mp3',
    paused: true,
    media: _extends({}, _constants.defaultOptions.media, {
      id: 'testId',
      sources: {
        mp3: 'test.mp3',
        oga: 'test.ogg'
      }
    })
  }
}, {
  action: {
    type: _constants.actionNames.SET_MEDIA,
    id: jPlayerOneId,
    media: {
      sources: {
        test: 'test.mp3'
      }
    }
  },
  expected: {
    error: {
      context: '{ media.sources: \'test\' }',
      hint: _constants.hints.FORMAT_NO_SUPPORT,
      message: _constants.errors.FORMAT_NO_SUPPORT
    }
  }
}];

var playData = exports.playData = [{
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PLAY,
    time: 30,
    id: jPlayerOneId
  },
  expected: {
    newTime: 30,
    paused: false
  }
}, {
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PLAY,
    time: NaN,
    id: jPlayerOneId
  },
  expected: {
    newTime: null,
    paused: false
  }
}, {
  action: {
    type: _constants.actionNames.PLAY,
    time: 30,
    id: jPlayerOneId
  },
  expected: {
    error: {
      context: 'play',
      hint: _constants.hints.URL_NOT_SET,
      message: _constants.errors.URL_NOT_SET
    }
  }
}];

var playHeadData = exports.playHeadData = [{
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PLAY_HEAD,
    percent: 300,
    id: jPlayerOneId
  },
  expected: {
    playHeadPercent: 100
  }
}, {
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PLAY_HEAD,
    percent: -100,
    id: jPlayerOneId
  },
  expected: {
    playHeadPercent: 0
  }
}, {
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PLAY_HEAD,
    percent: 30,
    id: jPlayerOneId
  },
  expected: {
    playHeadPercent: 30
  }
}, {
  action: {
    type: _constants.actionNames.PLAY_HEAD,
    percent: 30,
    id: jPlayerOneId
  },
  expected: {
    error: {
      context: 'setPlayHead',
      hint: _constants.hints.URL_NOT_SET,
      message: _constants.errors.URL_NOT_SET
    }
  }
}];

var pauseData = exports.pauseData = [{
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PAUSE,
    time: 30,
    id: jPlayerOneId
  },
  expected: {
    newTime: 30,
    paused: true
  }
}, {
  state: {
    src: 'test.mp3'
  },
  action: {
    type: _constants.actionNames.PAUSE,
    time: NaN,
    id: jPlayerOneId
  },
  expected: {
    newTime: null,
    paused: true
  }
}, {
  action: {
    type: _constants.actionNames.PAUSE,
    time: 30,
    id: jPlayerOneId
  },
  expected: {
    error: {
      context: 'pause',
      hint: _constants.hints.URL_NOT_SET,
      message: _constants.errors.URL_NOT_SET
    }
  }
}];

var volumeData = exports.volumeData = [{
  action: {
    type: _constants.actionNames.VOLUME,
    volume: 30,
    id: jPlayerOneId
  },
  expected: {
    volume: 1,
    muted: false
  }
}, {
  action: {
    type: _constants.actionNames.VOLUME,
    volume: -30,
    id: jPlayerOneId
  },
  expected: {
    volume: 0,
    muted: true
  }
}, {
  action: {
    type: _constants.actionNames.VOLUME,
    volume: 0.3,
    id: jPlayerOneId
  },
  expected: {
    volume: 0.3,
    muted: false
  }
}];

var muteData = exports.muteData = [{
  action: {
    type: _constants.actionNames.MUTE,
    mute: true,
    id: jPlayerOneId
  },
  expected: {
    muted: true
  }
}, {
  action: {
    type: _constants.actionNames.MUTE,
    mute: false,
    id: jPlayerOneId
  },
  expected: {
    muted: false
  }
}];

var focusData = exports.focusData = [{
  id: jPlayerTwoId,
  state: {
    keyEnabled: true
  },
  action: {
    type: _constants.actionNames.MUTE,
    mute: true,
    id: jPlayerOneId
  }
}, {
  id: jPlayerOneId,
  state: {
    keyEnabled: true
  },
  action: {
    type: _constants.actionNames.FOCUS,
    id: jPlayerOneId
  }
}];