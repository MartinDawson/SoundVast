'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactJplayerUtils = require('react-jplayer-utils');

var _urlNotSupportedError = require('../../util/errorHandlers/urlNotSupportedError');

var _urlNotSupportedError2 = _interopRequireDefault(_urlNotSupportedError);

var _actions = require('../../actions/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mapStateToProps = function mapStateToProps(_ref, _ref2) {
  var jPlayers = _ref.jPlayers;
  var id = _ref2.id,
      children = _ref2.children;
  return {
    loop: jPlayers[id].loop,
    showRemainingDuration: jPlayers[id].showRemainingDuration,
    src: jPlayers[id].src,
    currentTime: jPlayers[id].currentTime,
    playHeadPercent: jPlayers[id].playHeadPercent,
    paused: jPlayers[id].paused,
    defaultPlaybackRate: jPlayers[id].defaultPlaybackRate,
    playbackRate: jPlayers[id].playbackRate,
    preload: jPlayers[id].preload,
    volume: jPlayers[id].volume,
    muted: jPlayers[id].muted,
    autoplay: jPlayers[id].autoplay,
    newTime: jPlayers[id].newTime,
    timeFormats: jPlayers[id].timeFormats,
    mediaId: jPlayers[id].media.id,
    otherJPlayerIds: Object.keys(jPlayers).filter(function (key) {
      return key !== id;
    }),
    pauseOthersOnPlay: jPlayers[id].pauseOthersOnPlay,
    children: children
  };
};

var mapDispatchToProps = {
  setOption: _actions.setOption,
  pause: _actions.pause
};

var MediaContainer = function (_React$Component) {
  _inherits(MediaContainer, _React$Component);

  _createClass(MediaContainer, null, [{
    key: 'propTypes',
    get: function get() {
      return {
        onAbort: _propTypes2.default.func,
        onCanPlay: _propTypes2.default.func,
        onCanPlayThrough: _propTypes2.default.func,
        onDurationChange: _propTypes2.default.func,
        onEmptied: _propTypes2.default.func,
        onEncrypted: _propTypes2.default.func,
        onEnded: _propTypes2.default.func,
        onError: _propTypes2.default.func,
        onLoadedData: _propTypes2.default.func,
        onLoadedMetadata: _propTypes2.default.func,
        onLoadStart: _propTypes2.default.func,
        onPause: _propTypes2.default.func,
        onPlay: _propTypes2.default.func,
        onPlaying: _propTypes2.default.func,
        onProgress: _propTypes2.default.func,
        onRateChange: _propTypes2.default.func,
        onSeeked: _propTypes2.default.func,
        onSeeking: _propTypes2.default.func,
        onStalled: _propTypes2.default.func,
        onSuspend: _propTypes2.default.func,
        onTimeUpdate: _propTypes2.default.func,
        onVolumeChange: _propTypes2.default.func,
        onWaiting: _propTypes2.default.func,
        showRemainingDuration: _propTypes2.default.bool.isRequired,
        src: _propTypes2.default.string.isRequired,
        playHeadPercent: _propTypes2.default.number.isRequired,
        setOption: _propTypes2.default.func.isRequired,
        pause: _propTypes2.default.func.isRequired,
        id: _propTypes2.default.string.isRequired,
        mediaId: _propTypes2.default.string,
        pauseOthersOnPlay: _propTypes2.default.bool.isRequired,
        otherJPlayerIds: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
        timeFormats: _propTypes2.default.shape({
          showHour: _propTypes2.default.bool.isRequired,
          showMin: _propTypes2.default.bool.isRequired,
          showSec: _propTypes2.default.bool.isRequired,
          padHour: _propTypes2.default.bool.isRequired,
          padMin: _propTypes2.default.bool.isRequired,
          padSec: _propTypes2.default.bool.isRequired,
          sepHour: _propTypes2.default.string.isRequired,
          sepMin: _propTypes2.default.string.isRequired,
          sepSec: _propTypes2.default.string.isRequired
        }).isRequired,
        /* eslint-disable react/no-unused-prop-types */
        paused: _propTypes2.default.bool.isRequired,
        newTime: _propTypes2.default.number,
        loop: _propTypes2.default.bool.isRequired,
        autoplay: _propTypes2.default.bool.isRequired,
        defaultPlaybackRate: _propTypes2.default.number.isRequired,
        muted: _propTypes2.default.bool.isRequired,
        playbackRate: _propTypes2.default.number.isRequired,
        preload: _propTypes2.default.string.isRequired,
        volume: _propTypes2.default.number.isRequired,
        /* eslint-enable react/no-unused-prop-types */
        children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.element]).isRequired
      };
    }
  }, {
    key: 'defaultProps',
    get: function get() {
      return {
        onAbort: Function.prototype,
        onCanPlay: Function.prototype,
        onCanPlayThrough: Function.prototype,
        onDurationChange: Function.prototype,
        onEmptied: Function.prototype,
        onEncrypted: Function.prototype,
        onEnded: Function.prototype,
        onError: Function.prototype,
        onLoadedData: Function.prototype,
        onLoadedMetadata: Function.prototype,
        onLoadStart: Function.prototype,
        onPause: Function.prototype,
        onPlay: Function.prototype,
        onPlaying: Function.prototype,
        onProgress: Function.prototype,
        onRateChange: Function.prototype,
        onSeeked: Function.prototype,
        onSeeking: Function.prototype,
        onStalled: Function.prototype,
        onSuspend: Function.prototype,
        onTimeUpdate: Function.prototype,
        onVolumeChange: Function.prototype,
        onWaiting: Function.prototype,
        newTime: null,
        mediaId: null
      };
    }
  }]);

  function MediaContainer(props) {
    _classCallCheck(this, MediaContainer);

    var _this = _possibleConstructorReturn(this, (MediaContainer.__proto__ || Object.getPrototypeOf(MediaContainer)).call(this, props));

    _this.getCurrentPercentRelative = function () {
      var currentPercentRelative = 0;

      if (_this.currentMedia.seekable.length > 0) {
        currentPercentRelative = (0, _reactJplayerUtils.toPercentage)(_this.currentMedia.currentTime, _this.getSeekableEnd());
      }
      return currentPercentRelative;
    };

    _this.setCurrentMedia = function (ref) {
      _this.currentMedia = ref;
    };

    _this.getSeekableEnd = function () {
      return _this.currentMedia.seekable.end(_this.currentMedia.seekable.length - 1);
    };

    _this.setDurationText = function () {
      var durationText = '';

      if (_this.props.showRemainingDuration) {
        var timeRemaining = _this.currentMedia.duration - _this.currentMedia.currentTime;

        durationText = (timeRemaining > 0 ? '-' : '') + (0, _reactJplayerUtils.convertTime)(timeRemaining, _this.props.timeFormats);
      } else {
        durationText = (0, _reactJplayerUtils.convertTime)(_this.currentMedia.duration, _this.props.timeFormats);
      }

      _this.props.setOption(_this.props.id, 'durationText', durationText);
    };

    _this.setCurrentTimeText = function () {
      var currentTimeText = (0, _reactJplayerUtils.convertTime)(_this.currentMedia.currentTime, _this.props.timeFormats);

      _this.props.setOption(_this.props.id, 'currentTimeText', currentTimeText);
    };

    _this.pauseOthers = function () {
      _this.props.otherJPlayerIds.forEach(function (id) {
        return _this.props.pause(id);
      });
    };

    _this.updateMediaStatus = function () {
      var seekPercent = 0;

      var currentPercentAbsolute = (0, _reactJplayerUtils.toPercentage)(_this.currentMedia.currentTime, _this.currentMedia.duration);

      if (_this.currentMedia.seekable.length > 0) {
        seekPercent = (0, _reactJplayerUtils.toPercentage)(_this.getSeekableEnd(), _this.currentMedia.duration);
      }

      _this.setDurationText();
      _this.setCurrentTimeText();

      _this.props.setOption(_this.props.id, 'seekPercent', seekPercent);
      _this.props.setOption(_this.props.id, 'currentPercentRelative', _this.getCurrentPercentRelative());
      _this.props.setOption(_this.props.id, 'currentPercentAbsolute', currentPercentAbsolute);
      _this.props.setOption(_this.props.id, 'currentTime', _this.currentMedia.currentTime);
      _this.props.setOption(_this.props.id, 'duration', _this.currentMedia.duration);
      _this.props.setOption(_this.props.id, 'playbackRate', _this.currentMedia.playbackRate);
    };

    _this.updateCurrentMedia = function (_ref3) {
      var defaultPlaybackRate = _ref3.defaultPlaybackRate,
          playbackRate = _ref3.playbackRate,
          preload = _ref3.preload,
          volume = _ref3.volume,
          muted = _ref3.muted,
          autoplay = _ref3.autoplay,
          loop = _ref3.loop;

      _this.currentMedia.defaultPlaybackRate = defaultPlaybackRate;
      _this.currentMedia.playbackRate = playbackRate;
      _this.currentMedia.preload = preload;
      _this.currentMedia.volume = volume;
      _this.currentMedia.muted = muted;
      _this.currentMedia.autoplay = autoplay;
      _this.currentMedia.loop = loop;
    };

    _this.state = {};

    _this.events = {
      onAbort: _this.props.onAbort,
      onCanPlay: _this.props.onCanPlay,
      onCanPlayThrough: _this.props.onCanPlayThrough,
      onDurationChange: function onDurationChange() {
        _this.updateMediaStatus();
        _this.props.onDurationChange();
      },
      onEmptied: _this.props.onEmptied,
      onEncrypted: _this.props.onEncrypted,
      onEnded: function onEnded() {
        // Pause so that the play/pause button resets and the poster is shown again
        _this.props.pause(_this.props.id, 0);
        _this.updateMediaStatus();
        _this.props.onEnded();
      },
      onError: function onError() {
        _this.props.setOption(_this.props.id, 'error', (0, _urlNotSupportedError2.default)(_this.props.src));
        _this.props.onError();
      },
      onLoadedData: _this.props.onLoadedData,
      onLoadedMetadata: _this.props.onLoadedMetadata,
      onLoadStart: _this.props.onLoadStart,
      onPause: _this.props.onPause,
      onPlay: function onPlay() {
        _this.props.setOption(_this.props.id, 'paused', false);

        if (_this.props.pauseOthersOnPlay) {
          _this.pauseOthers();
        }

        _this.props.onPlay();
      },
      onPlaying: _this.props.onPlaying,
      onProgress: function onProgress() {
        var bufferedTimeRanges = [];

        for (var i = 0; i < _this.currentMedia.buffered.length; i += 1) {
          bufferedTimeRanges.push({
            start: _this.currentMedia.buffered.start(i),
            end: _this.currentMedia.buffered.end(i)
          });
        }
        _this.updateMediaStatus();
        _this.props.setOption(_this.props.id, 'bufferedTimeRanges', bufferedTimeRanges);
        _this.props.onProgress();
      },
      onRateChange: _this.props.onRateChange,
      onSeeked: function onSeeked() {
        _this.props.setOption(_this.props.id, 'seeking', false);
        _this.props.onSeeked();
      },
      onSeeking: function onSeeking() {
        _this.props.setOption(_this.props.id, 'seeking', true);
        _this.props.onSeeking();
      },
      onStalled: _this.props.onStalled,
      onSuspend: _this.props.onSuspend,
      onTimeUpdate: function onTimeUpdate() {
        _this.updateMediaStatus();
        _this.props.onTimeUpdate();
      },
      onVolumeChange: _this.props.onVolumeChange,
      onWaiting: _this.props.onWaiting
    };
    return _this;
  }

  _createClass(MediaContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.currentMedia.src = this.props.src;
      this.props.setOption(this.props.id, 'volumeSupported', (0, _reactJplayerUtils.canSetVolume)());

      this.updateCurrentMedia(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.updateCurrentMedia(nextProps);

      if (nextProps.mediaId !== this.props.mediaId && nextProps.src !== '') {
        this.currentMedia.src = nextProps.src;
      }

      if (nextProps.newTime !== null) {
        this.currentMedia.currentTime = nextProps.newTime;
        this.props.setOption(this.props.id, 'newTime', null);
      }

      if (nextProps.playHeadPercent !== this.props.playHeadPercent) {
        // TODO: Investigate why some .mp3 urls don't fire media events enough (http://www.davidgagne.net/m/song.mp3).
        // Hasn't fully loaded the song????
        if (this.currentMedia.seekable.length > 0) {
          var seekableEnd = this.getSeekableEnd();

          if (isFinite(seekableEnd)) {
            this.currentMedia.currentTime = (0, _reactJplayerUtils.toRelativePercentage)(nextProps.playHeadPercent, seekableEnd);
            /* Media events don't fire fast enough to give a smooth animation
              when dragging so we update it here as well, same problem as above? */
            this.props.setOption(this.props.id, 'currentPercentRelative', this.getCurrentPercentRelative());
          }
        }
      }

      if (nextProps.paused) {
        this.currentMedia.pause();
      } else {
        this.currentMedia.play();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.showRemainingDuration !== this.props.showRemainingDuration) {
        this.setDurationText();
      }
      if (prevProps.timeFormats !== this.props.timeFormats) {
        this.setCurrentTimeText();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), _extends({}, this.events, {
        ref: this.setCurrentMedia
      }));
    }
  }]);

  return MediaContainer;
}(_react2.default.Component);

exports.default = (0, _reactJplayerUtils.connectWithId)(mapStateToProps, mapDispatchToProps)(MediaContainer);