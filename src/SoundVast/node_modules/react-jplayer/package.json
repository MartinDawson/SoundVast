{
  "_args": [
    [
      {
        "raw": "react-jplayer@^5.0.0",
        "scope": null,
        "escapedName": "react-jplayer",
        "name": "react-jplayer",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast"
    ]
  ],
  "_from": "react-jplayer@>=5.0.0 <6.0.0",
  "_id": "react-jplayer@5.0.2",
  "_inCache": true,
  "_location": "/react-jplayer",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-jplayer-5.0.2.tgz_1496059471900_0.2391902960371226"
  },
  "_npmUser": {
    "name": "yoshimiii",
    "email": "u1356770@unimail.hud.ac.uk"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {
    "change-emitter": "0.1.6",
    "fbjs": "0.8.12",
    "hoist-non-react-statics": "1.2.0",
    "symbol-observable": "1.0.4"
  },
  "_requested": {
    "raw": "react-jplayer@^5.0.0",
    "scope": null,
    "escapedName": "react-jplayer",
    "name": "react-jplayer",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/",
    "/react-jplaylist"
  ],
  "_resolved": "https://registry.npmjs.org/react-jplayer/-/react-jplayer-5.0.2.tgz",
  "_shasum": "7a8342e26221fd95230390c37fb71084e5d979ed",
  "_shrinkwrap": null,
  "_spec": "react-jplayer@^5.0.0",
  "_where": "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast",
  "author": {
    "name": "Martin Dawson",
    "email": "u1356770@gmail.com"
  },
  "browserslist": [
    "chrome >= 15",
    "firefox >= 15",
    "explorer >= 9",
    "edge >= 12",
    "opera >= 16",
    "safari >= 5.1",
    "ios_saf >= 5.1",
    "chromeAndroid >= 36",
    "android >= 4",
    "ie_mob >= 9"
  ],
  "bugs": {
    "url": "https://github.com/jplayer/react-jPlayer/issues"
  },
  "dependencies": {
    "classnames": "^2.2.5",
    "lodash.merge": "^4.6.0",
    "prop-types": "^15.5.8",
    "react": "^15.4.1",
    "react-dom": "^15.4.1",
    "react-jplayer-utils": "^1.0.0",
    "react-motion": "^0.4.4",
    "react-redux": "^5.0.2",
    "recompose": "^0.22.0",
    "redux": "^3.6.0",
    "screenfull": "^3.0.2",
    "shortid": "^2.2.8"
  },
  "description": "Html5 audio and video player library for React",
  "devDependencies": {
    "autoprefixer": "^6.7.3",
    "babel-cli": "^6.6.4",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.4",
    "babel-plugin-istanbul": "^4.0.0",
    "babel-plugin-rewire": "^1.0.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-2": "^6.22.0",
    "babel-register": "^6.24.0",
    "babili-webpack-plugin": "0.0.11",
    "coveralls": "^2.11.16",
    "cross-env": "^3.1.4",
    "css-loader": "^0.27.2",
    "david": "^11.0.0",
    "editorconfig": "^0.13.2",
    "enzyme": "^2.8.2",
    "enzyme-redux": "^0.1.6",
    "eslint": "^3.17.1",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-config-defaults": "^9.0.0",
    "eslint-plugin-babel": "^4.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.7.0",
    "expect": "^1.20.2",
    "extract-text-webpack-plugin": "^2.1.0",
    "jsdom": "^9.12.0",
    "less": "^2.7.1",
    "less-loader": "^3.0.0",
    "markdown-toc": "^1.1.0",
    "mocha": "^3.2.0",
    "nyc": "^10.1.2",
    "optimize-css-assets-webpack-plugin": "^1.3.0",
    "postcss-loader": "^1.2.1",
    "pre-commit": "^1.2.2",
    "react": "^15.0.0",
    "react-addons-test-utils": "^15.4.1",
    "react-dom": "^15.0.0",
    "react-motion": "^0.4.4",
    "react-test-renderer": "^15.5.4",
    "redux": "^3.6.0",
    "rimraf": "^2.6.1",
    "style-loader": "^0.13.1",
    "webpack": "^2.2.1",
    "webpack-dev-server": "^2.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "7a8342e26221fd95230390c37fb71084e5d979ed",
    "tarball": "https://registry.npmjs.org/react-jplayer/-/react-jplayer-5.0.2.tgz"
  },
  "files": [
    "dist",
    "lib",
    "src"
  ],
  "gitHead": "0b18eb3f23178f1b0eef2f01057dec9ebc21d553",
  "homepage": "https://github.com/jplayer/react-jPlayer",
  "keywords": [
    "audio",
    "video",
    "video-player",
    "audio-player",
    "react",
    "redux",
    "jplayer",
    "javascript",
    "html5",
    "html5-audio",
    "html5-video",
    "media"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "yoshimiii",
      "email": "u1356770@unimail.hud.ac.uk"
    }
  ],
  "name": "react-jplayer",
  "nyc": {
    "extension": [
      ".jsx"
    ],
    "include": "src",
    "exclude": [
      "**/*.spec.{js,jsx}"
    ],
    "require": [
      "babel-register"
    ],
    "reporter": [
      "lcov",
      "text-summary"
    ],
    "all": true,
    "cache": true,
    "sourceMap": false,
    "instrument": false
  },
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test",
    "toc"
  ],
  "readme": "[![Build Status](https://travis-ci.org/jplayer/react-jPlayer.svg?branch=master)](https://travis-ci.org/jplayer/react-jPlayer)\n[![Coverage Status](https://coveralls.io/repos/github/jplayer/react-jPlayer/badge.svg?branch=master)](https://coveralls.io/github/jplayer/react-jPlayer?branch=master)\n[![dependencies Status](https://david-dm.org/jplayer/react-jPlayer/status.svg)](https://david-dm.org/jplayer/react-jPlayer)\n[![devDependencies Status](https://david-dm.org/jplayer/react-jPlayer/dev-status.svg)](https://david-dm.org/jplayer/react-jPlayer?type=dev)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n# react-jPlayer\nA Html5 audio/video player that has been inspired by the [jQuery](http://jquery.com/) plugin [jPlayer](http://jplayer.org/) but without the jQuery dependency.\n\nFor playlist functionaility, see [react-jPlaylist](https://github.com/jplayer/react-jPlaylist).\n\n<!-- toc -->\n\n  * [Live Demo](#live-demo)\n  * [Examples](#examples)\n  * [Installation](#installation)\n    + [NPM](#npm)\n    + [UMD](#umd)\n  * [Examples](#examples-1)\n  * [Features](#features)\n  * [To Note](#to-note)\n  * [Supported browsers](#supported-browsers)\n  * [TL:DR](#tldr)\n- [Documentation](#documentation)\n    + [`initialState([jPlayers])` : Required](#initialstatejplayers--required)\n    + [`reducer` : Required](#reducer--required)\n    + [`connect(jPlayer, options)` : Required](#connectjplayer-options--required)\n  * [Props](#props)\n    + [Actions](#actions)\n      - [`setOption(id, key, value)`](#setoptionid-key-value)\n      - [`setMedia(id, media)`](#setmediaid-media)\n      - [`clearMedia(id)`](#clearmediaid)\n      - [`play(id, [time])`](#playid-time)\n      - [`pause(id, [time])`](#pauseid-time)\n      - [`setPlayHead(id, percent)`](#setplayheadid-percent)\n      - [`setVolume(id, volume)`](#setvolumeid-volume)\n      - [`setMute(id, mute)`](#setmuteid-mute)\n      - [`focus(id)`](#focusid)\n    + [Options](#options)\n      - [`id` (string) : Required](#id-string--required)\n      - [`preload` (string)](#preload-string)\n      - [`minPlaybackRate` (number)](#minplaybackrate-number)\n      - [`maxPlaybackRate` (number)](#maxplaybackrate-number)\n      - [`playbackRate` (number)](#playbackrate-number)\n      - [`defaultPlaybackRate` (number)](#defaultplaybackrate-number)\n      - [`bufferColour` (string)](#buffercolour-string)\n      - [`volume` (number)](#volume-number)\n      - [`barDrag` (bool)](#bardrag-bool)\n      - [`guiFadeHoldTime` (number)](#guifadeholdtime-number)\n      - [`media` (object)](#media-object)\n      - [`keyBindings` (object)](#keybindings-object)\n      - [`showRemainingDuration` (bool)](#showremainingduration-bool)\n      - [`muted` (bool)](#muted-bool)\n      - [`loop` (bool)](#loop-bool)\n      - [`autoplay` (bool)](#autoplay-bool)\n      - [`smoothPlayBar` (bool)](#smoothplaybar-bool)\n      - [`fullScreen` (bool)](#fullscreen-bool)\n      - [`verticalPlaybackRate` (bool)](#verticalplaybackrate-bool)\n      - [`verticalVolume` (bool)](#verticalvolume-bool)\n      - [`keyEnabled` (bool)](#keyenabled-bool)\n      - [`timeFormats` (object)](#timeformats-object)\n    + [Status](#status)\n      - [`paused` (bool)](#paused-bool)\n      - [`seeking` (bool)](#seeking-bool)\n      - [`src` (string)](#src-string)\n      - [`currentTimeText` (string)](#currenttimetext-string)\n      - [`durationText` (string)](#durationtext-string)\n      - [`seekPercent` (number)](#seekpercent-number)\n      - [`currentPercentRelative` (number)](#currentpercentrelative-number)\n      - [`currentPercentAbsolute` (number)](#currentpercentabsolute-number)\n      - [`currentTime` (number)](#currenttime-number)\n      - [`duration` (number)](#duration-number)\n      - [`bufferedTimeRanges` (array)](#bufferedtimeranges-array)\n      - [`focused` (bool)](#focused-bool)\n    + [jPlayers](#jplayers)\n      - [`[nameOfYourjPlayer]` (object)](#nameofyourjplayer-object)\n  * [Components](#components)\n    + [`JPlayer`](#jplayer)\n    + [`GUI`](#gui)\n    + [`SeekBar`](#seekbar)\n    + [`PlayBar`](#playbar)\n    + [`BufferBar`](#bufferbar)\n    + [`Poster`](#poster)\n    + [`Video`](#video)\n    + [`Audio`](#audio)\n    + [`Title`](#title)\n    + [`FullScreen`](#fullscreen)\n    + [`Mute`](#mute)\n    + [`Play`](#play)\n    + [`Repeat`](#repeat)\n    + [`PlaybackRateBar`](#playbackratebar)\n    + [`PlaybackRateBarValue`](#playbackratebarvalue)\n    + [`VolumeBar`](#volumebar)\n    + [`VolumeBarValue`](#volumebarvalue)\n    + [`Download`](#download)\n    + [`Duration`](#duration)\n    + [`CurrentTime`](#currenttime)\n    + [`BrowserUnsupported`](#browserunsupported)\n  * [Misc](#misc)\n    + [classes](#classes)\n  * [Supported Media Formats](#supported-media-formats)\n- [Thanks](#thanks)\n\n<!-- tocstop -->\n\n### Live Demo\nhttp://react-jplayer.azurewebsites.net/\n\n### Examples\nhttps://github.com/jplayer/react-jPlayer-examples\n\n### Installation\n#### NPM\n`npm install --save react-jplayer`\n\n#### UMD\nThe recommended way to use this package is through npm and webpack. However if you insist on including the .js and .css files manually then it is available from the `/dist/` folder.\nFor example, if you copied the `/dist/` folder to the root of your project then the src tags would look like this:\n\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./dist/css/controls/iconControls.css\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"./dist/css/sleek.css\">\n\n<script src=\"./dist/js/jPlayer.js\"></script>\n```\n\nModule is exported to a global variable called `ReactJPlayer`.\n\n### Examples\nhttps://github.com/jplayer/react-jPlayer-examples\n\n### Features\n* Cross compatible with many legacy different Html5 browsers\n* Fully customizable, modular and componentized\n* Supports a large range of [Html5 Audio/Video formats](https://github.com/jplayer/react-jPlayer#user-content-supported-media-formats)\n* Comes with a fully reponsive css skin for your players\n* No jQuery dependency that is in the standard [jPlayer](http://jplayer.org/)\n* Fast and performant\n\n### To Note\n* No flash player support because flash is dead. I also haven't been able to find a browser that React supports that also didn't support Html5 video/audio players either which makes flash useless.\n* Dependency on [Redux](https://github.com/reactjs/redux)\n\n### Supported browsers\n* Chrome v15+\n* FireFox v15+\n* Edge 13+\n* Internet Explorer 9+\n* Opera v16+\n* Yandex\n* Windows Safari 5.1\n* IOS Safari 5.1+\n* Chrome for Android v36+\n* Android browser 4+\n* IEMobile 11¹\n\n¹partially tested without audio/video because browserstack emulators don't support it.\n\n### TL:DR\n- All of the jPlayer properties that you need are passed into your jPlayer component.\n- Audio/Video events can be subscribed to by passing functions to the `events` prop for the [Audio](https://github.com/jplayer/react-jPlayer#audio) or [Video](https://github.com/jplayer/react-jPlayer#video) component, E.g: ` <audio events={{ play: () => console.log(\"playing media\") }} />`.\n\n## Documentation\n#### `initialState([jPlayers])` : Required\nDeep merges the options that you passed into the [`connect`](https://github.com/jplayer/react-jPlayer#connectjplayer-options--required) function with react-jPlayer's default options. The result of this must be passed to your stores initial state.\n\n**Arguments**\n1. `jPlayers(s)` (array or single react element): Accepts either an array of jPlayers or a single jPlayer. \n\n**Returns**\n\n(object): The initial state for the jPlayer(s) that needs to be passed to the Redux store.\n\n#### `reducer` : Required\nThe jPlayer reducer that will be called whenever a jPlayer function is dispatched. Must be passed to your store with the key named 'jPlayer'.\n\n#### `connect(jPlayer, options)` : Required\nConnects your jPlayer to the jPlayer store by wrapping Redux's original connect.\n\n**Arguments**\n1. `jPlayer` (function): Your jPlayer with which to connect to the store.\n2. `options` (object): The [jPlayer options](https://github.com/jplayer/react-jPlayer#options) that you want the jPlayer to be initialized with.\n\n**Returns**\n\n(function): A component that wraps your jPlayer. This means that you can use Redux original connect to wrap this connect with as well if you wanted to pass aditional Redux data from the store to your jPlayer.\n\n**Static Properties**\n1. `jPlayer`: The original jPlayer component that you passed in.\n2. `options`: The jPlayer options that you passed into the `connect()`.\n\n**Renders**\n\nThe connected jPlayer. Any additional props that you passed in are passed through to your jPlayer so you can use them as usual.\n\n### Props\njPlayer automatically passes the following properties in to your jPlayer component:\n\n- `id` (string): The current jPlaylist's id that you supplied through [`options.id`](https://github.com/jplayer/react-jPlayer#id-string--required).\n- [`[...actions]`](https://github.com/jplayer/react-jPlayer#actions) (func): The actions that you can call to modify jPlaylist's properties at runtime.\n- `jPlayers` (object): All of the jPlayers options get passed in here. The names of the jPlayers are what you specified for each one in [`options.id`].\n\n#### Actions\nAll of the actions automatically get passed into your jPlayers for ease of use so you can just call them directly.\n\nIf you need to call these actions from another part of your codebase that isn't a jPlayer then it will be best to use Redux's `connect()` on your component and call dispatch on the imported action.\nFor example, if you wanted to toggle the [`showRemainingDuration`](https://github.com/jplayer/react-jPlayer#showremainingduration-bool) from somewhere else in the application on a jPlayer called `'AudioPlayer'`:\n\n```\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { actions } from 'react-jplayer';\n\n/* jPlayers is automatically injected into the state if you set followed the setup correctly.\nYou can also access your other state properties like usual. */\n\nconst mapStateToProps = state => ({\n  showRemainingDuration: state.jPlayers.AudioPlayer.showRemainingDuration,\n});\n\nconst SomeRandomFunc = ({ showRemainingDuration, dispatch }) =>\n  <div onClick={() => dispatch(actions.setOption('AudioPlayer', 'showRemainingDuration', !showRemainingDuration))}>\n    Toggle Duration\n  </div>;\n\nexport default connect(mapStateToProps)(SomeRandomFunc);\n\n```\n\n##### `setOption(id, key, value)`\nSets any jPlayer [option](https://github.com/jplayer/react-jPlayer#options).\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `key` (string): The name of the option that you want to set. Specifying nested keys is not supported.\n3. `value` (any): The value to set the option to.\n\n##### `setMedia(id, media)`\nSets the media.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `media` (object): The new media you want to set.\n\n##### `clearMedia(id)`\nClear the media and reset all status values. This will be rarely used, if you are setting new media you **don't** need to use this function beforehand as `setMedia` already internally clears existing values before setting a new media.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n\n##### `play(id, [time])`\nPlay the media.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `time` (number): The time that the jPlayer should start playing from, defaults to the current time.\n\n##### `pause(id, [time])`\nPauses the media.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `time` (number): The time that the jPlayer should pause from, defaults to the current time.\n\n##### `setPlayHead(id, percent)`\nMoves the play-head to the value specified. This only moves the play-head. Whether the media plays from that point depends on its current state, i.e. If it was playing, play continues from the new play-head. If it was paused, the media is cued to the new play-head position.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `percent` (number): The percent that the play bar should be moved to.\n\n##### `setVolume(id, volume)`\nSets the volume.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `volume` (number): Value given should be between 0 - 1. The volume will be capped at either 0 or 1 if the value given is outside this range.\n\n##### `setMute(id, mute)`\nMutes or un-mutes.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n2. `mute` (bool)\n\n##### `focus(id)`\nThis method is called internally for each of the other actions if that jPlayer has keyEnabled set to true. You can also manually focus on the jPlayer if it has keyEnabled set to true by calling this method.\n\n**Arguments**\n1. `id` (string): Id of the jPlayer to apply this to.\n\n#### Options\nThese properties are used to initialize the jPlayer. They are deep merged with the default jPlayer options.\n\n##### `id` (string) : Required\nThe unique id of the jPlayer.\n\n##### [`preload` (string)](https://developer.mozilla.org/en/docs/Web/HTML/Element/video#attr-preload)\nDefault: \"metadata\"\n\n##### `minPlaybackRate` (number)\nDefault: 0.5\n\nUseful to limit the lower boundary of the playbackRate, e.g. when using a slider for the playbackRate\n\n##### `maxPlaybackRate` (number)\nDefault: 4\n\nUseful to limit the upper boundary of the playbackRate, e.g. when using a slider for the playbackRate\n\n##### [`playbackRate` (number)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\nDefault: 1.0\n\n##### [`defaultPlaybackRate` (number)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)\nDefault: 1.0\n\n##### `bufferColour` (string)\nDefault: \"#ddd\"\n\nThe [`BufferBar`](https://github.com/jplayer/react-jPlayer#bufferbar-) component renders a `<canvas />` element and uses the fillStyle property to fill in the bar. Therefore the colour property must be set in JS and not css.\n\n##### [`volume` (number)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\nDefault: 0.8\n\n##### `barDrag` (bool)\nDefault: true\n\nAllows dragging of all of the components which are bars, e.g. [`VolumeBar`](https://github.com/jplayer/react-jPlayer#volumebar-), [`PlaybackRateBar`](https://github.com/jplayer/react-jPlayer#playbackratebar-) and [`SeekBar`](https://github.com/jplayer/react-jPlayer#seekbar-).\n\n##### `guiFadeHoldTime` (number)\nDefault: 3000\n\nThe time with which the gui waits until fading out. This only starts when the user moves the mouse over the root jPlayer element, the audio/video is full screen and the media is playing.\n\n##### `media` (object)\nDefault: \n```\nmedia: {\n  {\n    sources: {},\n    title: '',\n    artist: '',\n    poster: '',\n    free: false,\n  }\n}\n```\n&ensp;&ensp;`sources` is where you specify the media to play. The keys must be one of the [supported formats](https://github.com/jplayer/react-jPlayer#user-content-supported-media-formats). The values must be a valid media url.\n\n&ensp;&ensp;`title` is the title of the media.\n\n&ensp;&ensp;`artist` is the artist of the media.\n\n&ensp;&ensp;`poster` needs to be a valid image element url.\n\n&ensp;&ensp;`free` specifies that the media is free. This is used internally to hide/show the download. [Setting this to false does not mean the media is secure](https://github.com/jplayer/react-jPlayer#download-).\n\n##### `keyBindings` (object)\nDefault:\n```\nkeyBindings: {\n  play: {\n    key: 80, // p\n    fn: () => (stateProps.paused ? dispatch(play(id)) :\n                                    dispatch(pause(id))),\n  },\n  fullScreen: {\n    key: 70, // f\n    fn: () => dispatch(setOption(id, 'fullScreen', !stateProps.fullScreen)),\n  },\n  mute: {\n    key: 77, // m\n    fn: () => dispatch(setMute(id, !stateProps.muted)),\n  },\n  volumeUp: {\n    key: 190, // .\n    fn: () => {\n      dispatch(setVolume(id, stateProps.volume + 0.1));\n    },\n  },\n  volumeDown: {\n    key: 188, // ,\n    fn: () => dispatch(setVolume(id, stateProps.volume - 0.1)),\n  },\n  loop: {\n    key: 76, // l\n    fn: () => dispatch(setOption(id, 'loop', !stateProps.loop)),\n  },\n}\n```\n&ensp;&ensp;`key` can be a keyCode number [representing the key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode) or a [key value string](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). The key value string should be preferred but it's not as supported as keyCode.\n\n&ensp;&ensp;`fn` is the function that will be executed once the key has been pressed.\n\nThe keybindings you specify will be deep merged with the defaults.\nKey presses for the html elements `input`, `textArea` and `select` when these elements have focus will not trigger the `keyBinding` function.\n\n##### `showRemainingDuration` (bool)\nDefault: false\n\nWhen true, the duration will count down the time remaining in the media. When false, the duration will stay at fixed at the media's time.\n\n##### [`muted` (bool)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\nDefault: false\n\n##### [`loop` (bool)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop)\nDefault: false\n\n##### [`autoplay` (bool)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay)\nDefault: false\n\n##### `smoothPlayBar` (bool)\nDefault: false\n\nThe play bar width changes are animated over 250ms to smooth the change, rather than a step change. This also affects clicks on the play bar, where the bar animates to the new position.\n\nShort duration media benefits the most, since their step changes are the largest.\n\n##### `fullScreen` (bool)\nDefault: false\n\nSets the jPlayer to fullScreen mode when true. The vast majority of users will not want this to be true by default as this option is usually toggled via the GUI. \n\nThis uses the [FullScreen API](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API) internally. If the FullScreen api is not supported by the browser then everything but the jPlayer will be hidden. `jPlayer.css` will then handle making the jPlayer width and height 100% of the screen to simulate the native full screen mode as close as possible.\n\n##### `verticalPlaybackRate` (bool)\nDefault: false\n\nSet this to true if your playback rate bar is vertical. Clicks on the playback rate bar will then be calculated properly.\n\n##### `verticalVolume` (bool)\nDefault: false\n\nSet this to true if your volume bar is vertical. Clicks on the volume bar will then be calculated properly.\n\n##### `keyEnabled` (bool)\nDefault: true\n\nAllows key presses to affect the jPlayer. For the [`keyBindings`](https://github.com/jplayer/react-jPlayer#keybindings-object) object to have any affect this will need to be true.\n\n##### `timeFormats` (object)\nDefines the display format of the currentTime and duration times.\n\nDefault: \n\n```\ntimeFormats: {\n  showHour: false,\n  showMin: true,\n  showSec: true,\n  padHour: false,\n  padMin: true,\n  padSec: true,\n  sepHour: ':',\n  sepMin: ':',\n  sepSec: '',\n}\n```\n\n&ensp;&ensp;`showHour` displays the hours.\n\n&ensp;&ensp;`showMin` displays the minutes.\n\n&ensp;&ensp;`showSec` displays the seconds.\n\n&ensp;&ensp;`padHour` zero pads the hour if less than 10.\n\n&ensp;&ensp;`padMin` zero pads the minute if less than 10.\n\n&ensp;&ensp;`padSec` zero pads the second if less than 10.\n\n&ensp;&ensp;`sepHour` string between hour and minute.\n\n&ensp;&ensp;`sepMin` string between minute and second.\n\n&ensp;&ensp;`sepSec` string after second.\n\n#### Status\nProperties in this object are not meant to be modified and should be treated as read-only. These properties are automatically set and updated by jPlayer depending on the [options](https://github.com/jplayer/react-jPlayer#options) that you specified.\n\n##### [`paused` (bool)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused)\nDefault: true\n\n##### `seeking` (bool)\nDefault: false\n\nTrue when the user is currently seeking. This get set back to false after the user has finished seeking, i.e. in the `seeked` event.\n\n##### `src` (string)\nDefault: ''\n\nThis is the current media's src url that you specified in `media.sources`.\n\n##### `currentTimeText` (string)\nDefault: '0:00'\n\nThe current time that is formatted into text using the [`timeFormats`](https://github.com/jplayer/react-jPlayer#timeformats-object) object that is being used for the [`CurrentTime`](https://github.com/jplayer/react-jPlayer#currenttime-) component.\n\n##### `durationText` (string)\nDefault: ''\n\nThe duration that is formatted into text using the [`timeFormats`](https://github.com/jplayer/react-jPlayer#timeformats-object) object that is being used for the [`Duration`](https://github.com/jplayer/react-jPlayer#duration-) component.\n\n##### `seekPercent` (number)\nDefault: 0\n\nThis represents the percentage of the media which is seekable.\n\n##### `currentPercentRelative` (number)\nDefault: 0\n\nThe current time as a percent of seekPercent.\n\n##### `currentPercentAbsolute` (number)\nDefault: 0\n\nThe current time as a percent of duration.\n\n##### [`currentTime` (number)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\nDefault: 0\n\n##### [`duration` (number)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration)\nDefault: 0\n\n##### `bufferedTimeRanges` (array)\nDefault: []\n\n&ensp;&ensp;`start` (string): the start time, in seconds of where the media is buffering.\n\n&ensp;&ensp;`end` (string): the end time, in seconds of where the media is buffering.\n\nThe start and end of where the buffering has occured. If the user seeks to different parts of the media, then the browser will automatically start downloading from that position and skip the media in between if it hasn't already been downloaded. The properties in this array represent that and are used internally by the [`BufferBar`](https://github.com/jplayer/react-jPlayer#bufferbar-) component.\n\nMore information on this can be found in this [MDN article](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/buffering_seeking_time_ranges).\n\n##### `focused` (bool)\nDefault: false\n\nThis property determines which jPlayer should take precendance when the user is using key presses to affect the media and is only ever true if the current jPlayer has [`keyEnabled`](https://github.com/jplayer/react-jPlayer#keyenabled-bool) set to true.\nThis is set internally for each action that the user takes on the jPlayer, i.e. each time a jPlayer [action](https://github.com/jplayer/react-jPlayer#actions) is called. You can also manually focus on the jPlayer if it has keyEnabled set to true by calling [`focus()`](https://github.com/jplayer/react-jPlayer#focusid).\n\n#### jPlayers\nThe other jPlayers get passed into each of your jPlayer components so you can modify or read the properties on these easily as well.\n\n[0...N]\n##### `[nameOfYourjPlayer]` (object)\n\n&ensp;&ensp;[`options`](https://github.com/jplayer/react-jPlayer#options) (object): The options that you specified for this jPlayer.\n\n&ensp;&ensp;[`status`](https://github.com/jplayer/react-jPlayer#status) (object): The status values that react-jPlayer internally sets for you to use.\n\n### Components\nAll components accept custom props that will be applied as attributes to the component if the names don't conflict with existing properties. \n\nIf the names do conflict then the custom props will overwrite any existing props that are used on that component internally, including event handlers. The exception to this is the property `className` for the `JPlayer` component.\n\nE.g. `<Mute aria-haspopup />` will render <div className=\"jp-mute\" aria-haspopup></div>\n\nSpecifying `className` for the `JPlayer` component will merge the classes instead of overwriting. The reason for this is that jPlayer internally calculates multiple classes to apply on this component based on the status of the jPlayer, so we don't want to overwrite these.\n\nE.g. `<JPlayer className=\"jp-sleek\" />` will render <div className=\"jp-jplayer jp-sleek\"></div>\n\n#### `JPlayer`\n**props**\n1. `children` (element or array: elements) : Required\n\nThis component needs to be at the root of any other jPlayer components. Handles the states that are applied to the jPlayer DOM element.\n\n#### `GUI`\n**props**\n1. `children` (element or array: elements) : Required\n\nShould wrap all of the components that the user interacts with. Handles the fading in and out when in full screen mode.\n\n#### `SeekBar`\n**props**\n1. `children` (element or array: elements) : Required\n\nShould wrap the `PlayBar` and `BufferBar`. Handles the user being able to seek to a new time when the user clicks, drags or touches on the progress bar. \n\n#### `PlayBar`\n**props**\n1. `children` (node)\n\nShows how much of the media has been played so far.\n\n#### `BufferBar`\n**props**\n1. `children` (node)\n\nShows how much of the media has been downloaded so far. This also takes in to consideration the user seeking to multiple points on the media and skipping parts of the media.\n\n#### `Poster`\n**props**\n1. `children` (node)\n\nThe poster to be displayed for the media. Uses `media.poster` as the src for the image.\n\n#### `Video`\n**props**\n1. `events` (object): Any of the [React Media Events](https://facebook.github.io/react/docs/events.html#media-events) that you want to listen to.\n2. `children` (node)\n\nIf the first media source that you have supplied to `media.sources` is an [video format](https://en.wikipedia.org/wiki/Video_file_format) and it is a valid url that can be played then react-jPlayer will use this component and set the `src` to what you supplied.\n\n#### `Audio`\n**props**\n1. `events` (object): Any of the [React Media Events](https://facebook.github.io/react/docs/events.html#media-events) that you want to listen to.\n2. `children` (node)\n\nIf the first media source that you have supplied to `media.sources` is an [audio format](https://en.wikipedia.org/wiki/Audio_file_format) and it is a valid url that can be played then react-jPlayer will use this component and set the `src` to what you supplied.\n\n#### `Title`\n**props**\n1. `children` (string or number)\n\nDefault: `media.artist` - `media.title`\n\n#### `FullScreen`\n**props**\n1. `children` (node) : Required\n\nHandles clicks on this component toggling the full screen of the jPlayer.\n\n#### `Mute`\n**props**\n1.`children` (node) : Required\n\nHandles clicks on this component toggling the mute of the jPlayer.\n\n#### `Play`\n**props**\n1. `children` (node) : Required\n\nHandles clicks on this component setting the jPlayer to be paused or playing.\n\n#### `Repeat`\n**props**\n1. `children` (node) : Required\n\nHandles clicks on this component toggling the looping of the jPlayer.\n\n####  `PlaybackRateBar`\n**props**\n1. `children` (node)\n\nDefault: `PlaybackRateBarValue`\n\nHandles clicks, dragging or touches on this component setting the playback rate of the media.\n\n#### `PlaybackRateBarValue`\n**props**\n1. `children` (node)\n\nThis is used by the `PlaybackRateBar` by default so the majority of applications won't need to use this. Represents the playback rate as the width or height of the component depending on the property `verticalPlaybackRate`.\n\n#### `VolumeBar`\n**props**\n1. `children` (node)\n\nDefault: `VolumeBarValue`\n\nHandles clicks, dragging or touches on this component setting the volume of the media.\n\n#### `VolumeBarValue`\n**props**\n1. `children` (node)\n\nThis is used by the `VolumeBar` by default so the majority of applications won't need to use this. Represents the volume as the width or height of the component depending on the property `verticalVolume`.\n\n#### `Download`\n**props**\n1. `children` (node) : Required\n\nHandles clicks on this component downloading the media if the `media.free` option is true. \n\nWarning: This will not make the media secure, i.e. users can still download the song from the network tab. You will need to secure the media this from the server instead.\nIf the browser doesn't support the `download` attribute then clicks on this component will open a new tab or window with the source media instead.\n\n#### `Duration`\n**props**\n1. `children` (node)\n\nDefault: [durationText](https://github.com/jplayer/react-jPlayer#durationtext-string)\n\nRenders the `durationText` of the jPlayer. Renders nothing if the duration hasn't been set yet (i.e IOS until the user manually plays the media).\n\n#### `CurrentTime`\n**props**\n1. `children` (node)\n\nDefault: [durationText](https://github.com/jplayer/react-jPlayer#currenttimetext-string)\n\nRenders the `currentTimeText` of the jPlayer.\n\n#### `BrowserUnsupported`\n**props**\n1. `children` (node)\n\nDefault:\n```\n<div>\n  <h4>Browser Unsupported</h4>\n  Your browser does not support this media file.\n  To play the media you will need to update your browser to a more recent version.\n</div>\n```\nRenders html that tells the user to update their browser if jPlayer doesn't support the specified media file.\n\n### Misc\n#### classes\nclasses that react-jPlayer uses internally for each component are exported for you to use for conveniance.\n\n### Supported Media Formats\n1. mp3\n2. m4a\n3. m3u8a\n4. m3ua\n5. oga\n6. flac\n7. wav\n8. webma\n9. fla\n10. rtmpa\n11. m4v\n12. m3u8v\n12. ogv\n13. webmv\n14. flv\n15. rtmpv\n\n## Thanks\n[1]: https://www.browserstack.com/\n[2]: https://cloud.githubusercontent.com/assets/15030491/22504241/4240e478-e86d-11e6-8147-d2771655346a.png\n[![BrowserStack][2]][1]\n\nBrowserStack for giving me access to their testing software for free. Contact them if you have a free open-source project for a free account.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jplayer/react-jPlayer.git"
  },
  "scripts": {
    "build": "rimraf lib && babel src --out-dir lib --ignore spec.js,spec.jsx",
    "coverage": "cross-env BABEL_ENV=test nyc mocha src/**/*.spec.{js,jsx} --opts ./mocha.opts",
    "dist": "rimraf dist && webpack",
    "lint": "eslint --fix --ext .jsx,.js ./src",
    "packages": "david",
    "packages:update": "david update",
    "postversion": "git push && git push --tags",
    "preversion": "npm test && npm run lint",
    "test": "cross-env BABEL_ENV=test mocha src/**/*.spec.{js,jsx} --opts ./mocha.opts",
    "test:watch": "npm test -- -w",
    "toc": "markdown-toc -i README.md && git add README.md",
    "version": "npm run dist && npm run build && git add -A dist"
  },
  "version": "5.0.2"
}
