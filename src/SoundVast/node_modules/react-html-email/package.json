{
  "_args": [
    [
      {
        "raw": "react-html-email@^1.2.0",
        "scope": null,
        "escapedName": "react-html-email",
        "name": "react-html-email",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast"
    ]
  ],
  "_from": "react-html-email@>=1.2.0 <2.0.0",
  "_id": "react-html-email@1.2.0",
  "_inCache": true,
  "_location": "/react-html-email",
  "_nodeVersion": "0.10.25",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-html-email-1.2.0.tgz_1485242175752_0.7544602532871068"
  },
  "_npmUser": {
    "name": "chromakode",
    "email": "npm@chromakode.com"
  },
  "_npmVersion": "2.14.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-html-email@^1.2.0",
    "scope": null,
    "escapedName": "react-html-email",
    "name": "react-html-email",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-html-email/-/react-html-email-1.2.0.tgz",
  "_shasum": "13f40df6f24728e9e0f9bd6d6bae5fc0d21fe3de",
  "_shrinkwrap": null,
  "_spec": "react-html-email@^1.2.0",
  "_where": "C:\\Users\\Martin.dawson\\SoundVast\\src\\SoundVast",
  "author": {
    "name": "Max Goodman",
    "email": "c@chromakode.com"
  },
  "bugs": {
    "url": "https://github.com/chromakode/react-html-email/issues"
  },
  "dependencies": {},
  "description": "Create elegant HTML email templates using React.",
  "devDependencies": {
    "babel": "~6.3.26",
    "babel-cli": "~6.3.17",
    "babel-eslint": "~4.1.6",
    "babel-plugin-transform-object-rest-spread": "~6.3.13",
    "babel-preset-es2015": "~6.3.13",
    "babel-preset-react": "~6.3.13",
    "babel-register": "~6.3.13",
    "cheerio": "~0.19.0",
    "eslint": "~1.10.3",
    "eslint-config-airbnb": "~2.0.0",
    "eslint-plugin-react": "~3.11.2",
    "expect": "~1.13.4",
    "isparta": "~4.0.0",
    "mocha": "~2.3.4",
    "node-fetch": "~1.3.3",
    "react": "^15.0.0",
    "react-dom": "^15.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "13f40df6f24728e9e0f9bd6d6bae5fc0d21fe3de",
    "tarball": "https://registry.npmjs.org/react-html-email/-/react-html-email-1.2.0.tgz"
  },
  "gitHead": "de060c8a01f4c5b469f0811e02b05dc1daf2ed30",
  "homepage": "https://github.com/chromakode/react-html-email#readme",
  "keywords": [
    "react",
    "html",
    "email"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "chromakode",
      "email": "npm@chromakode.com"
    }
  ],
  "name": "react-html-email",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0",
    "react-dom": "^0.14.0 || ^15.0.0"
  },
  "readme": "# react-html-email\n\n[![Build Status](https://img.shields.io/travis/chromakode/react-html-email/master.svg?style=flat-square)](https://travis-ci.org/chromakode/react-html-email)\n[![Coverage Status](https://img.shields.io/codecov/c/github/chromakode/react-html-email/master.svg?style=flat-square)](https://codecov.io/github/chromakode/react-html-email?branch=master)\n[![npm](https://img.shields.io/npm/v/react-html-email.svg?style=flat-square)](https://www.npmjs.com/package/react-html-email)\n[![npm](https://img.shields.io/npm/l/react-html-email.svg?style=flat-square)](https://github.com/chromakode/react-html-email/blob/master/LICENSE)\n\nModern HTML emails are a tangle of archaic HTML and inline styles. This library encapsulates the cruft into simple React components and helps avoid common pitfalls.\n\n[react-html-email](https://github.com/chromakode/react-html-email) provides a set of components for a standard 600px table layout (inspired by [HTML Email Boilerplate](https://github.com/seanpowell/Email-Boilerplate)). React's [Supported Tags and Attributes](http://facebook.github.io/react/docs/tags-and-attributes.html) are extended to include a few deprecated attributes useful for legacy clients. In addition, a `style` prop validator is included which uses [Campaign Monitor's CSS Support Guide](https://www.campaignmonitor.com/css/) to check for potential compatibility issues across email clients.\n\n## Installation\n\n    $ npm install react-html-email\n\n## Usage\n\nImport the library and set up React:\n\n```js\nimport ReactHTMLEmail from 'react-html-email'\n\n// set up React to support a few HTML attributes useful for legacy clients\nReactHTMLEmail.injectReactEmailAttributes()\n```\n\nTo render a simple email:\n\n```js\nimport { Email, Item, Span, A, renderEmail } from 'react-html-email'\n\nconst emailHTML = renderEmail(\n  <Email title=\"Hello World!\">\n    <Item align=\"center\">\n      <Span fontSize={20}>\n        This is an example email made with:\n        <A href=\"https://github.com/chromakode/react-html-email\">react-html-email</A>.\n      </Span>\n    </Item>\n  </Email>\n)\n```\n\nYou can find more examples in the [examples directory](https://github.com/chromakode/react-html-email/tree/master/examples) of the repo.\n\n\n## API\n\n### `renderEmail(emailComponent)`\n\nRender an email component to an HTML string. Adds an XHTML 1.0 Strict doctype, as per [HTML Email Boilerplate](https://github.com/seanpowell/Email-Boilerplate).\n\n### `injectReactEmailAttributes()`\n\nReact ignores some attributes we need, such as the table `align` and `valign` properties. Call this function to expand React's attribute repertoire before using email components from the library.\n\n### `configStyleValidator(config)`\n\nBy default, inline styles passed to the `style` prop will be validated against [Campaign Monitor's CSS Support Guide](https://www.campaignmonitor.com/css/). Here are the default settings, which can be overridden using `configStyleValidator`:\n\n```js\nReactHTMLEmail.configStyleValidator({\n  // When strict, incompatible style properties will result in an error.\n  strict: true,\n\n  // Whether to warn when compatibility notes for a style property exist.\n  warn: true,\n\n  // Platforms to consider for compatibility checks.\n  platforms: [\n    'gmail',\n    'gmail-android',\n    'apple-mail',\n    'apple-ios',\n    'yahoo-mail',\n    'outlook',\n    'outlook-legacy',\n    'outlook-web',\n  ],\n})\n```\n\n### `PropTypes.style`\n\nA PropTypes validator for checking email inline style compatibility. Used by default in the components below. Exported for use in your own components.\n\n## Components\n\nComponents in `react-html-email` include defaults for basic style properties, so that client styles are reset and normalized. Every component accepts a `style` prop which overrides the reset styles.\n\n### `<Email>`\n\nAn HTML document with a centered 600px `<table>` inside `<table>` container based on [HTML Email Boilerplate](https://github.com/seanpowell/Email-Boilerplate).\n\nIt's necessary to always include a `title` prop for some clients' \"open in browser\" feature.\n\nSee [MailChimp's HTML guide](http://templates.mailchimp.com/development/html/) for how this works.\n\n### `<Box>`\n\nA simplification of the `<table>` element, the workhorse of an HTML email design. `<Box>`es contain a vertical stack of `<Item>`s. Use them to create visual structure, filled buttons, and spacing.\n\n### `<Item>`\n\nA subsection of a `<Box>`, essentially a `<tr><td>` unit.\n\n### `<Span>`\n\nUse to assign styles to text.\n\nIt can be handy to create an object containing your default text styles for reuse. For example:\n\n```js\nconst textStyles = {\n  fontFamily: 'Verdana',\n  fontSize: 42,\n  fontWeight: 'bold',\n  color: 'orange',\n}\n\n[...]\n\n<Span {...textDefaults}>Congratulations!</Span>\n<Span {...textDefaults}>You won a free cruise!</Span>\n```\n\n### `<A>`\n\nUse to format links. Requires an `href` prop. Always sets `target=\"_blank\"` and defaults to underline. To remove the underline, set `textDecoration=\"none\"`.\n\n### `<Image>`\n\nAn image, without any pesky borders, outlines, or underlines by default. Requires a `src` prop, and `width` and `height` to be set. You can override the default styles (such as adding a border) using the `style` prop.\n\n## Head CSS and Media Queries\nYou can pass a string prop `headCSS` to your `<Email>` component. You can see it in our [kitchenSink.js](https://github.com/chromakode/react-html-email/blob/master/examples/kitchenSink.js) example.\n\n## Mailchimp attributes\nIf you're using Mailchimp and need to add their custom `mc:edit` attributes to your markup, we recommend using the [mailchimpify](http://github.com/Roilan/mailchimpify) module.\n\n## License\n\n[MIT](https://github.com/chromakode/react-html-email/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chromakode/react-html-email.git"
  },
  "scripts": {
    "compile": "babel -d lib/ src/ && cp -v src/supportMatrix.json lib/",
    "lint": "eslint ./examples ./scripts ./src ./test",
    "prepublish": "npm run compile",
    "scrape": "babel-node scripts/scrapeStyleSupport.js > src/supportMatrix.json",
    "test": "mocha --compilers js:babel-register",
    "test:cov": "babel-node $(npm bin)/isparta cover node_modules/mocha/bin/_mocha"
  },
  "version": "1.2.0"
}
