# source: https://localhost:8080/graphql
# timestamp: Sun Apr 01 2018 19:55:49 GMT+0200 (W. Europe Daylight Time)

schema {
  query: Query
  mutation: Mutation
  subscription: AppSubscription
}

type ApplicationUser implements Node {
  """The Id of the ApplicationUser"""
  userId: String!

  """The Global Id of the ApplicationUser"""
  id: ID!
  userName: String!
  email: String!
  emailConfirmed: Boolean!
}

type AppSubscription {
  commentAdded: Comment
}

interface Audio {
  id: ID
  audioId: Int!
  name: String!
  likes: Int!
  dislikes: Int!

  """The cover image url"""
  coverImageUrl: String

  """The date the user added the audio"""
  dateAdded: Date

  """The genres the audio belongs to"""
  genres: [Genre]

  """The ratings that have been applied by users to this audio"""
  ratings: [Rating]

  """The top level comments for the audio"""
  comments(
    """
    Only look at connected edges with cursors greater than the value of `after`.
    """
    after: String = null

    """
    Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    """
    first: Int = null
  ): CommentPayloadConnection
}

type Comment implements Node {
  """The Id of the Comment"""
  commentId: Int!

  """The Global Id of the Comment"""
  id: ID!
  likes: Int!
  dislikes: Int!

  """The body of the comment"""
  body: String!

  """The date when the comment was made"""
  dateAdded: Date

  """The user who added the comment"""
  user: ApplicationUser!

  """The audio that the comment was added to"""
  audio: Audio!

  """The original comment that this is a reply to"""
  originalComment: Comment

  """The reply tree for the top level comments"""
  replies(
    """
    Only look at connected edges with cursors greater than the value of `after`.
    """
    after: String = null

    """
    Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    """
    first: Int = null
  ): CommentPayloadConnection
}

"""
A connection from an object to a list of objects of type `CommentPayload`.
"""
type CommentPayloadConnection {
  """
  A count of the total number of objects in this connection, ignoring
  pagination. This allows a client to fetch the first five objects by passing
  "5" as the argument to `first`, then fetch the total count so it could display
  "5 of 83", for example. In cases where we employ infinite scrolling or don't
  have an exact count of entries, this field will return `null`.
  """
  totalCount: Int

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CommentPayloadEdge]

  """
  A list of all of the objects returned in the connection. This is a convenience
  field provided for quickly exploring the API; rather than querying for "{
  edges { node } }" when no edge data is needed, this field can be used instead.
  Note that when clients like Relay need to fetch the "cursor" field on the edge
  to enable efficient pagination, this shortcut cannot be used, and the full "{
  edges { node } } " version should be used instead.
  """
  items: [Comment]
}

"""
An edge in a connection from an object to another object of type `CommentPayload`.
"""
type CommentPayloadEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Comment
}

"""
The `Date` scalar type represents a timestamp provided in UTC. `Date` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

scalar Decimal

type ExternalLoginCallbackPayload {
  """The existing logged in user"""
  user: ApplicationUser

  """The current login provider, i.e facebook, twitter, google etc"""
  loginProvider: String

  """The new users user name"""
  userName: String
}

input ExternalLoginConfirmationInput {
  clientMutationId: String = null
  userName: String!
}

type ExternalLoginConfirmationPayload {
  clientMutationId: String
}

"""Provides filtering"""
input FilterInput {
  """Filter by newest"""
  newest: Boolean = null
}

type Flag implements Node {
  """The Id of the Flag"""
  flagId: Int!

  """The Global Id of the Flag"""
  id: ID!

  """Any additional details for why the user flagged"""
  additionalDetails: String!

  """The reason why the user flagged"""
  reason: String!

  """The audio that the user flagged"""
  audio: Audio

  """The comment that the user flagged"""
  comment: Comment
}

input FlagAudioInput {
  clientMutationId: String = null
  audioId: Int!
  reason: String!
  additionalDetails: String = null
}

input FlagCommentInput {
  clientMutationId: String = null
  commentId: Int!
  reason: String!
  additionalDetails: String = null
}

type FlagObjectPayload {
  clientMutationId: String
  flag: Flag
}

input GenerateResetPasswordTokenInput {
  clientMutationId: String = null
  email: String!
}

type GenerateResetPasswordTokenPayload {
  clientMutationId: String
  user: ApplicationUser
  passwordResetToken: String
}

type Genre {
  id: ID
  name: String!

  """The cover image url"""
  coverImageUrl: String
}

type LiveStream implements Node & Audio {
  """The Id of the LiveStream"""
  audioId: Int!

  """The Global Id of the LiveStream"""
  id: ID!
  name: String!
  websiteUrl: String
  likes: Int!
  dislikes: Int!
  country: String!

  """The cover image url"""
  coverImageUrl: String

  """The date the user added the live stream"""
  dateAdded: Date

  """The genre the live stream belongs to"""
  genres: [Genre]

  """The ratings that have been applied by users to this live stream"""
  ratings: [Rating]
  streamDatas: [StreamData]

  """The top level comments for the live stream"""
  comments(
    """
    Only look at connected edges with cursors greater than the value of `after`.
    """
    after: String = null

    """
    Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    """
    first: Int = null
  ): CommentPayloadConnection
}

"""
A connection from an object to a list of objects of type `LiveStreamPayload`.
"""
type LiveStreamPayloadConnection {
  """
  A count of the total number of objects in this connection, ignoring
  pagination. This allows a client to fetch the first five objects by passing
  "5" as the argument to `first`, then fetch the total count so it could display
  "5 of 83", for example. In cases where we employ infinite scrolling or don't
  have an exact count of entries, this field will return `null`.
  """
  totalCount: Int

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [LiveStreamPayloadEdge]

  """
  A list of all of the objects returned in the connection. This is a convenience
  field provided for quickly exploring the API; rather than querying for "{
  edges { node } }" when no edge data is needed, this field can be used instead.
  Note that when clients like Relay need to fetch the "cursor" field on the edge
  to enable efficient pagination, this shortcut cannot be used, and the full "{
  edges { node } } " version should be used instead.
  """
  items: [LiveStream]
}

"""
An edge in a connection from an object to another object of type `LiveStreamPayload`.
"""
type LiveStreamPayloadEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: LiveStream
}

input LoginInput {
  clientMutationId: String = null
  username: String!
  password: String!
  rememberMe: Boolean = null
}

type LoginPayload {
  clientMutationId: String
  user: ApplicationUser
}

type LoginProvider {
  name: String!
  displayName: String!
}

type LogoutPayload {
  clientMutationId: String
}

type Mutation {
  saveLiveStream(input: SaveLiveStreamInput!): SaveLiveStreamPayload
  rateAudio(input: RateInput!): RateAudioPayload
  rateComment(input: RateInput!): RateAudioPayload
  register(input: RegisterInput!): RegisterPayload
  login(input: LoginInput!): LoginPayload
  externalLoginConfirmation(input: ExternalLoginConfirmationInput!): ExternalLoginConfirmationPayload
  logout: LogoutPayload
  sendEmail(input: SendEmailInput!): SendEmailPayload
  generateResetPasswordToken(input: GenerateResetPasswordTokenInput!): GenerateResetPasswordTokenPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
  comment(input: SaveCommentInput!): SaveCommentPayload
  flagAudio(input: FlagAudioInput!): FlagObjectPayload
  flagComment(input: FlagCommentInput!): FlagObjectPayload
}

interface Node {
  """Global node Id"""
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its global Id"""
  node(
    """The global Id of the object"""
    id: ID!
  ): Node
  quote: Quote
  liveStreams(
    """
    Only look at connected edges with cursors greater than the value of `after`.
    """
    after: String = null

    """
    Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    """
    first: Int = null

    """The genre that the live stream belongs to"""
    genre: String = null

    """The search query to filter the liveStreams against"""
    searchQuery: String = null

    """The filters to apply to the live streams"""
    filter: FilterInput = null
  ): LiveStreamPayloadConnection
  genres: [Genre]
  user: ApplicationUser
  externalLoginCallback: ExternalLoginCallbackPayload
  confirmEmail(
    """The id of the user"""
    userId: String!

    """The unique code to verify the email"""
    token: String!
  ): Boolean
  loginProviders: [LoginProvider]
}

type Quote implements Node {
  """The Id of the Quote"""
  quoteId: Int!

  """The Global Id of the Quote"""
  id: ID!
  quotation: String!
}

type RateAudioPayload {
  clientMutationId: String
  rating: Rating
}

input RateInput {
  clientMutationId: String = null
  id: Int!
  liked: Boolean!
}

type Rating implements Node {
  """The Id of the Rating"""
  ratingId: Int!

  """The Global Id of the Rating"""
  id: ID!

  """Whether the user has liked the audio or not"""
  liked: Boolean!

  """The user that rated the audio"""
  user: ApplicationUser

  """The audio that was rated by the user"""
  audio: Audio

  """The comment that was rated by the user"""
  comment: Comment
}

input RegisterInput {
  clientMutationId: String = null
  username: String!
  email: String!
  password: String!
}

type RegisterPayload {
  clientMutationId: String
  user: ApplicationUser
  emailConfirmationToken: String
}

input ResetPasswordInput {
  clientMutationId: String = null
  password: String!
  userId: String!
  token: String!
}

type ResetPasswordPayload {
  clientMutationId: String
}

input SaveCommentInput {
  clientMutationId: String = null
  body: String!
  audioId: Int!
  originalCommentId: Int = null
}

type SaveCommentPayload {
  clientMutationId: String
  comment: Comment!
}

input SaveLiveStreamInput {
  clientMutationId: String = null
  name: String!
  liveStreamUrl: String!
  coverImageName: String!
  websiteUrl: String = null
  country: String = null
  tags: [TagInput] = null
  genreIds: [String] = null
}

type SaveLiveStreamPayload {
  clientMutationId: String
  liveStream: LiveStream!
}

input SendEmailInput {
  clientMutationId: String = null
  email: String!
  message: String!
  subject: String!
}

type SendEmailPayload {
  clientMutationId: String
}

type StreamData implements Node {
  """The Id of the StreamData"""
  streamDataId: Int!

  """The Global Id of the StreamData"""
  id: ID!
  liveStreamUrl: String!
  contentType: String
  bitrate: Int
}

input TagInput {
  """The existing tag id"""
  id: Int = null

  """The name of the new tag"""
  tag: String = null
}
