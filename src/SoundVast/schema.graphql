# source: http://localhost:8080/graphql
# timestamp: Wed Dec 27 2017 17:56:11 GMT+0100 (W. Europe Standard Time)

input AddSongToPlaylistInput {
  clientMutationId: String
  playlistId: Int!
  songId: Int!
}

type AddSongToPlaylistPayload {
  clientMutationId: String
  playlist: Playlist
}

type ApplicationUser {
  id: ID
  userName: String!
  email: String!
  emailConfirmed: Boolean!

  # The score that the user has earned from contributing
  contributionScore: Int!

  # The playlists that the user has created.
  playlists(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int
  ): PlaylistPayloadConnection

  # The songs that the user has uploaded
  uploads: [Song]

  # The songs that the user has liked
  likedSongs: [Song]
}

interface Audio {
  id: ID
  audioId: Int!
  name: String!

  # The poster image for the audio
  coverImageUrl: String!
  likes: Int!
  dislikes: Int!
  playCount: Int!

  # The upload date of the audio
  uploadDate: Date

  # The user who uploaded the audio
  user: ApplicationUser

  # The genre the audio belongs to
  genre: Genre

  # The ratings that have been applied by users to this audio
  ratings: [Rating]

  # The comments for the audio
  comments(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int

    # Get the replies for the original comment instead
    originalCommentId: Int
  ): CommentPayloadConnection
}

type Comment implements Node {
  # The Id of the Comment
  commentId: Int!

  # The Global Id of the Comment
  id: ID!

  # The date when the comment was made
  date: Date!
  likes: Int!
  dislikes: Int!
  repliesCount: Int!

  # The body of the comment
  body: String!

  # The user who added the comment
  user: ApplicationUser!

  # The audio that the comment was added to
  audio: Audio!

  # The original comment that this comment was a reply to
  originalComment: Comment
}

input CommentFilterInput {
  mostCommented: Boolean

  # The days since to start filtering from
  from: Int

  # The days since to start filter to
  to: Int
}

# A connection from an object to a list of objects of type `CommentPayload`.
type CommentPayloadConnection {
  # A count of the total number of objects in this connection, ignoring
  # pagination. This allows a client to fetch the first five objects by passing
  # "5" as the argument to `first`, then fetch the total count so it could display
  # "5 of 83", for example. In cases where we employ infinite scrolling or don't
  # have an exact count of entries, this field will return `null`.
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [CommentPayloadEdge]

  # A list of all of the objects returned in the connection. This is a convenience
  # field provided for quickly exploring the API; rather than querying for "{
  # edges { node } }" when no edge data is needed, this field can be used instead.
  # Note that when clients like Relay need to fetch the "cursor" field on the edge
  # to enable efficient pagination, this shortcut cannot be used, and the full "{
  # edges { node } } " version should be used instead.
  items: [Comment]
}

# An edge in a connection from an object to another object of type `CommentPayload`.
type CommentPayloadEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Comment
}

input CreatePlaylistInput {
  clientMutationId: String
  name: String!
}

type CreatePlaylstPayload {
  clientMutationId: String
  playlist: Playlist
}

# The `Date` scalar type represents a timestamp provided in UTC. `Date` expects
# timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

scalar Decimal

input EditSongInput {
  clientMutationId: String
  songId: Int!
  name: String!
  artist: String
  free: Boolean!
  coverImageUrl: String!
  genreId: Int
}

type EditSongPayload {
  clientMutationId: String
  song: Song!
}

type ExternalLoginCallbackPayload {
  # The existing logged in user
  user: ApplicationUser

  # The current login provider, i.e facebook, twitter, google etc
  loginProvider: String

  # The new users user name
  userName: String
}

input ExternalLoginConfirmationInput {
  clientMutationId: String
  userName: String!
}

type ExternalLoginConfirmationPayload {
  clientMutationId: String
}

# Provides filtering
input FilterInput {
  # Filter by date added
  newest: Boolean

  # Filter by likes
  ratingFilter: RatingFilterInput

  # Filter by comments
  commentFilter: CommentFilterInput

  # Filter by plays
  playedFilter: PlayedFilterInput
}

type Flag implements Node {
  # The Id of the Flag
  flagId: Int!

  # The Global Id of the Flag
  id: ID!

  # Any additional details for why the user flagged
  additionalDetails: String!

  # The reason why the user flagged
  reason: String!

  # The audio that the user flagged
  audio: Audio

  # The comment that the user flagged
  comment: Comment
}

input FlagAudioInput {
  clientMutationId: String
  audioId: Int!
  reason: String!
  additionalDetails: String
}

input FlagCommentInput {
  clientMutationId: String
  commentId: Int!
  reason: String!
  additionalDetails: String
}

type FlagObjectPayload {
  clientMutationId: String
  flag: Flag
}

input GenerateResetPasswordTokenInput {
  clientMutationId: String
  email: String!
}

type GenerateResetPasswordTokenPayload {
  clientMutationId: String
  user: ApplicationUser
  passwordResetToken: String
}

type Genre {
  id: ID
  name: String!

  # The type of audio that this genre belongs to, e.g. Music, Radio etc
  type: String!

  # The cover image url for this genre
  coverImageUrl: String!

  # The audios that belong to this genre
  audios: [Audio]
}

type LiveStream implements Node, Audio {
  # The Id of the LiveStream
  audioId: Int!

  # The Global Id of the LiveStream
  id: ID!
  name: String!

  # The poster image for the live stream
  coverImageUrl: String!
  liveStreamUrl: String!
  likes: Int!
  dislikes: Int!
  playCount: Int!

  # The upload date of the live stream
  uploadDate: Date

  # The user who uploaded the live stream
  user: ApplicationUser

  # The genre the live stream belongs to
  genre: Genre

  # The ratings that have been applied by users to this live stream
  ratings: [Rating]

  # The comments for the live stream
  comments(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int

    # Get the replies for the original comment instead
    originalCommentId: Int
  ): CommentPayloadConnection
}

# A connection from an object to a list of objects of type `LiveStreamPayload`.
type LiveStreamPayloadConnection {
  # A count of the total number of objects in this connection, ignoring
  # pagination. This allows a client to fetch the first five objects by passing
  # "5" as the argument to `first`, then fetch the total count so it could display
  # "5 of 83", for example. In cases where we employ infinite scrolling or don't
  # have an exact count of entries, this field will return `null`.
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [LiveStreamPayloadEdge]

  # A list of all of the objects returned in the connection. This is a convenience
  # field provided for quickly exploring the API; rather than querying for "{
  # edges { node } }" when no edge data is needed, this field can be used instead.
  # Note that when clients like Relay need to fetch the "cursor" field on the edge
  # to enable efficient pagination, this shortcut cannot be used, and the full "{
  # edges { node } } " version should be used instead.
  items: [LiveStream]
}

# An edge in a connection from an object to another object of type `LiveStreamPayload`.
type LiveStreamPayloadEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: LiveStream
}

input LoginInput {
  clientMutationId: String
  username: String!
  password: String!
  rememberMe: Boolean
}

type LoginPayload {
  clientMutationId: String
  user: ApplicationUser
}

type LoginProvider {
  name: String!
  displayName: String!
}

type LogoutPayload {
  clientMutationId: String
}

type Mutation {
  updatePlayCount(input: UpdatePlayCountInput!): UpdatePlayCountPayload
  saveSong(input: SaveSongInput!): SaveSongPayload
  saveLiveStream(input: SaveLiveStreamInput!): SaveLiveStreamPayload
  rateAudio(input: RateInput!): RateAudioPayload
  rateComment(input: RateInput!): RateAudioPayload
  register(input: RegisterInput!): RegisterPayload
  login(input: LoginInput!): LoginPayload
  externalLoginConfirmation(input: ExternalLoginConfirmationInput!): ExternalLoginConfirmationPayload
  logout: LogoutPayload
  sendEmail(input: SendEmailInput!): SendEmailPayload
  generateResetPasswordToken(input: GenerateResetPasswordTokenInput!): GenerateResetPasswordTokenPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
  comment(input: SaveCommentInput!): SaveCommentPayload
  flagAudio(input: FlagAudioInput!): FlagObjectPayload
  flagComment(input: FlagCommentInput!): FlagObjectPayload
  editSong(input: EditSongInput!): EditSongPayload
  createPlaylist(input: CreatePlaylistInput!): CreatePlaylstPayload
  addSongToPlaylist(input: AddSongToPlaylistInput!): AddSongToPlaylistPayload
}

interface Node {
  # Global node Id
  id: ID
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input PlayedFilterInput {
  mostPlayed: Boolean

  # The days since to start filtering from
  from: Int

  # The days since to start filter to
  to: Int
}

type Playlist implements Node {
  # The Id of the Playlist
  playlistId: Int!

  # The Global Id of the Playlist
  id: ID!

  # The name that the user gave the playlist
  name: String!

  # The cover image url for the playlist. Set to the first song in it.
  coverImageUrl: String

  # The user who created the playlist
  user: ApplicationUser!

  # The songs in the playlist.
  songPlaylists(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int
  ): SongPlaylistPayloadConnection
}

# A connection from an object to a list of objects of type `PlaylistPayload`.
type PlaylistPayloadConnection {
  # A count of the total number of objects in this connection, ignoring
  # pagination. This allows a client to fetch the first five objects by passing
  # "5" as the argument to `first`, then fetch the total count so it could display
  # "5 of 83", for example. In cases where we employ infinite scrolling or don't
  # have an exact count of entries, this field will return `null`.
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [PlaylistPayloadEdge]

  # A list of all of the objects returned in the connection. This is a convenience
  # field provided for quickly exploring the API; rather than querying for "{
  # edges { node } }" when no edge data is needed, this field can be used instead.
  # Note that when clients like Relay need to fetch the "cursor" field on the edge
  # to enable efficient pagination, this shortcut cannot be used, and the full "{
  # edges { node } } " version should be used instead.
  items: [Playlist]
}

# An edge in a connection from an object to another object of type `PlaylistPayload`.
type PlaylistPayloadEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Playlist
}

type Query {
  # Fetches an object given its global Id
  node(
    # The global Id of the object
    id: ID!
  ): Node
  song(
    # The id of the song
    id: Int
  ): Song
  playlist(
    # The id of the playlist
    id: Int!
  ): Playlist
  quote: Quote
  songs(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int

    # The genre that the song belongs to
    genre: String

    # The filters to apply to the songs
    filter: FilterInput
  ): SongPayloadConnection
  liveStreams(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int

    # The genre that the live stream belongs to
    genre: String

    # The filters to apply to the songs
    filter: FilterInput
  ): LiveStreamPayloadConnection
  genres: [Genre]
  user: ApplicationUser
  externalLoginCallback: ExternalLoginCallbackPayload
  confirmEmail(
    # The id of the user
    userId: String!

    # The unique code to verify the email
    token: String!
  ): Boolean
  loginProviders: [LoginProvider]
}

type Quote implements Node {
  # The Id of the Quote
  quoteId: Int!

  # The Global Id of the Quote
  id: ID!
  quotation: String!
}

type RateAudioPayload {
  clientMutationId: String
  rating: Rating
}

input RateInput {
  clientMutationId: String
  id: Int!
  liked: Boolean!
}

type Rating {
  id: ID

  # Whether the user has liked the audio or not
  liked: Boolean!

  # The user that rated the audio
  user: ApplicationUser

  # The audio that was rated by the user
  audio: Audio

  # The comment that was rated by the user
  comment: Comment
}

input RatingFilterInput {
  topRated: Boolean

  # The minimum number of ratings that need to have been applied for this filter to have any effect
  minimumNumberOfRatingsThreshold: Int

  # The days since to start filtering from
  from: Int

  # The days since to start filter to
  to: Int
}

input RegisterInput {
  clientMutationId: String
  username: String!
  email: String!
  password: String!
}

type RegisterPayload {
  clientMutationId: String
  user: ApplicationUser
  emailConfirmationToken: String
}

input ResetPasswordInput {
  clientMutationId: String
  password: String!
  userId: String!
  token: String!
}

type ResetPasswordPayload {
  clientMutationId: String
}

input SaveCommentInput {
  clientMutationId: String
  body: String!
  audioId: Int!
  originalCommentId: Int
}

type SaveCommentPayload {
  clientMutationId: String
  comment: Comment
}

input SaveLiveStreamInput {
  clientMutationId: String
  name: String!
  liveStreamUrl: String!
  coverImageUrl: String!
  genreId: Int
}

type SaveLiveStreamPayload {
  clientMutationId: String
  liveStream: LiveStream!

  # The amount of contribution points the user earns from adding a live stream
  contributionPoints: Int!
}

input SaveSongInput {
  clientMutationId: String
  name: String!
  artist: String
  free: Boolean
  coverImageUrl: String!
  genreId: Int
}

type SaveSongPayload {
  clientMutationId: String
  song: Song!

  # The amount of contribution points the user earns from uploading a song
  contributionPoints: Int!
}

input SendEmailInput {
  clientMutationId: String
  email: String!
  message: String!
  subject: String!
}

type SendEmailPayload {
  clientMutationId: String
}

type Song implements Node, Audio {
  # The Id of the Song
  audioId: Int!

  # The Global Id of the Song
  id: ID!
  name: String!

  # The poster image for the song
  coverImageUrl: String!
  artist: String
  free: Boolean!
  likes: Int!
  dislikes: Int!
  playCount: Int!

  # The upload date of the song
  uploadDate: Date

  # The user who uploaded the song
  user: ApplicationUser

  # The genre the song belongs to
  genre: Genre

  # The ratings that have been applied by users to this song
  ratings: [Rating]

  # The comments for the song
  comments(
    # Only look at connected edges with cursors greater than the value of `after`.
    after: String

    # Specifies the number of edges to return starting from `after` or the first entry if `after` is not specified.
    first: Int

    # Get the replies for the original comment instead
    originalCommentId: Int
  ): CommentPayloadConnection
}

# A connection from an object to a list of objects of type `SongPayload`.
type SongPayloadConnection {
  # A count of the total number of objects in this connection, ignoring
  # pagination. This allows a client to fetch the first five objects by passing
  # "5" as the argument to `first`, then fetch the total count so it could display
  # "5 of 83", for example. In cases where we employ infinite scrolling or don't
  # have an exact count of entries, this field will return `null`.
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [SongPayloadEdge]

  # A list of all of the objects returned in the connection. This is a convenience
  # field provided for quickly exploring the API; rather than querying for "{
  # edges { node } }" when no edge data is needed, this field can be used instead.
  # Note that when clients like Relay need to fetch the "cursor" field on the edge
  # to enable efficient pagination, this shortcut cannot be used, and the full "{
  # edges { node } } " version should be used instead.
  items: [Song]
}

# An edge in a connection from an object to another object of type `SongPayload`.
type SongPayloadEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Song
}

type SongPlaylist implements Node {
  # The Id of the SongPlaylist
  songPlaylistId: Int!

  # The Global Id of the SongPlaylist
  id: ID!

  # The playlist for this song
  playlist: Playlist

  # The song in this playlist
  song: Song

  # The user who created this playlist
  user: ApplicationUser
}

# A connection from an object to a list of objects of type `SongPlaylistPayload`.
type SongPlaylistPayloadConnection {
  # A count of the total number of objects in this connection, ignoring
  # pagination. This allows a client to fetch the first five objects by passing
  # "5" as the argument to `first`, then fetch the total count so it could display
  # "5 of 83", for example. In cases where we employ infinite scrolling or don't
  # have an exact count of entries, this field will return `null`.
  totalCount: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [SongPlaylistPayloadEdge]

  # A list of all of the objects returned in the connection. This is a convenience
  # field provided for quickly exploring the API; rather than querying for "{
  # edges { node } }" when no edge data is needed, this field can be used instead.
  # Note that when clients like Relay need to fetch the "cursor" field on the edge
  # to enable efficient pagination, this shortcut cannot be used, and the full "{
  # edges { node } } " version should be used instead.
  items: [SongPlaylist]
}

# An edge in a connection from an object to another object of type `SongPlaylistPayload`.
type SongPlaylistPayloadEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: SongPlaylist
}

input UpdatePlayCountInput {
  clientMutationId: String
  audioId: Int!
}

type UpdatePlayCountPayload {
  clientMutationId: String
  audio: Audio!
}
